<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Castle.ActiveWriter.ActiveWriterDomainModel.Description" xml:space="preserve">
    <value>A Visual Studio 2010/2012 addin to design domain models and to generate code decorated with ActiveRecord attributes or supported with NHibernate configuration based on the model.</value>
    <comment>Description for DslLibrary &apos;ActiveWriter&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ActiveWriterDomainModel.DisplayName" xml:space="preserve">
    <value>ActiveWriter</value>
    <comment>DisplayName for DslLibrary &apos;ActiveWriter&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model.Description" xml:space="preserve">
    <value>Domain model</value>
    <comment>Description for DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model.DisplayName" xml:space="preserve">
    <value>Model</value>
    <comment>DisplayName for DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/UseNullables.Description" xml:space="preserve">
    <value>Instructs ActiveWriter to generate code using nullables where possible.</value>
    <comment>Description for DomainProperty &apos;UseNullables&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/UseNullables.DisplayName" xml:space="preserve">
    <value>Use Nullables</value>
    <comment>DisplayName for DomainProperty &apos;UseNullables&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/UseNullables.Category" xml:space="preserve">
    <value>Code Generation</value>
    <comment>Category for DomainProperty &apos;UseNullables&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/CaseOfPrivateFields.Description" xml:space="preserve">
    <value>Tells ActiveWriter how to name private fields of properties if the Access of Property is PropertyAccess.Property (Default)</value>
    <comment>Description for DomainProperty &apos;CaseOfPrivateFields&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/CaseOfPrivateFields.DisplayName" xml:space="preserve">
    <value>Case Of Private Fields</value>
    <comment>DisplayName for DomainProperty &apos;CaseOfPrivateFields&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/CaseOfPrivateFields.Category" xml:space="preserve">
    <value>Code Generation</value>
    <comment>Category for DomainProperty &apos;CaseOfPrivateFields&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/GenerateMonoRailProject.Description" xml:space="preserve">
    <value>Tells ActiveWriter to generate a seperate MonoRail project with View and Controller code, taking this file&apos;s output as the model.</value>
    <comment>Description for DomainProperty &apos;GenerateMonoRailProject&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/GenerateMonoRailProject.DisplayName" xml:space="preserve">
    <value>Generate MonoRail Project</value>
    <comment>DisplayName for DomainProperty &apos;GenerateMonoRailProject&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/GenerateMonoRailProject.Category" xml:space="preserve">
    <value>Code Generation - Web</value>
    <comment>Category for DomainProperty &apos;GenerateMonoRailProject&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/MonoRailProjectName.Description" xml:space="preserve">
    <value>Name of the MonoRail project. If a project with the same name already exists in the solution, it won&apos;t be added to the solution.</value>
    <comment>Description for DomainProperty &apos;MonoRailProjectName&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/MonoRailProjectName.DisplayName" xml:space="preserve">
    <value>MonoRail Project Name</value>
    <comment>DisplayName for DomainProperty &apos;MonoRailProjectName&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/MonoRailProjectName.Category" xml:space="preserve">
    <value>Code Generation - Web</value>
    <comment>Category for DomainProperty &apos;MonoRailProjectName&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/MonoRailProjectPath.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.Model.MonoRail Project Path</value>
    <comment>Description for DomainProperty &apos;MonoRailProjectPath&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/MonoRailProjectPath.DisplayName" xml:space="preserve">
    <value>MonoRail Project Path</value>
    <comment>DisplayName for DomainProperty &apos;MonoRailProjectPath&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/MonoRailProjectPath.Category" xml:space="preserve">
    <value>Code Generation - Web</value>
    <comment>Category for DomainProperty &apos;MonoRailProjectPath&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/MonoRailDefaultLayout.Description" xml:space="preserve">
    <value></value>
    <comment>Description for DomainProperty &apos;MonoRailDefaultLayout&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/MonoRailDefaultLayout.DisplayName" xml:space="preserve">
    <value>MonoRail Default Layout</value>
    <comment>DisplayName for DomainProperty &apos;MonoRailDefaultLayout&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/MonoRailDefaultLayout.Category" xml:space="preserve">
    <value>Code Generation - Web</value>
    <comment>Category for DomainProperty &apos;MonoRailDefaultLayout&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/MonoRailDefaultRescue.Description" xml:space="preserve">
    <value></value>
    <comment>Description for DomainProperty &apos;MonoRailDefaultRescue&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/MonoRailDefaultRescue.DisplayName" xml:space="preserve">
    <value>MonoRail Default Rescue</value>
    <comment>DisplayName for DomainProperty &apos;MonoRailDefaultRescue&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/MonoRailDefaultRescue.Category" xml:space="preserve">
    <value>Code Generation - Web</value>
    <comment>Category for DomainProperty &apos;MonoRailDefaultRescue&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/MonoRailViewFileExtension.Description" xml:space="preserve">
    <value></value>
    <comment>Description for DomainProperty &apos;MonoRailViewFileExtension&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/MonoRailViewFileExtension.DisplayName" xml:space="preserve">
    <value>MonoRail View File Extension</value>
    <comment>DisplayName for DomainProperty &apos;MonoRailViewFileExtension&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/MonoRailViewFileExtension.Category" xml:space="preserve">
    <value>Code Generation - Web</value>
    <comment>Category for DomainProperty &apos;MonoRailViewFileExtension&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/UseGenerics.Description" xml:space="preserve">
    <value>Instructs ActiveWriter to generate code using generic bases where possible. This setting is overridable in class level.</value>
    <comment>Description for DomainProperty &apos;UseGenerics&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/UseGenerics.DisplayName" xml:space="preserve">
    <value>Use Generics</value>
    <comment>DisplayName for DomainProperty &apos;UseGenerics&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/UseGenerics.Category" xml:space="preserve">
    <value>Code Generation</value>
    <comment>Category for DomainProperty &apos;UseGenerics&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/UseBaseClass.Description" xml:space="preserve">
    <value>Instructs ActiveWriter to generate classes inherited from a base class. If Base Class Name property is empty, ActiveRecordBase or ActiveRecordBase&lt;T&gt; will be used depending on the Use generics property.</value>
    <comment>Description for DomainProperty &apos;UseBaseClass&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/UseBaseClass.DisplayName" xml:space="preserve">
    <value>Use Base Class</value>
    <comment>DisplayName for DomainProperty &apos;UseBaseClass&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/UseBaseClass.Category" xml:space="preserve">
    <value>Code Generation</value>
    <comment>Category for DomainProperty &apos;UseBaseClass&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/BaseClassName.Description" xml:space="preserve">
    <value>Defines the base class to be inherited. Does have no effect if Use Base Class property is set to false.</value>
    <comment>Description for DomainProperty &apos;BaseClassName&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/BaseClassName.DisplayName" xml:space="preserve">
    <value>Base Class Name</value>
    <comment>DisplayName for DomainProperty &apos;BaseClassName&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/BaseClassName.Category" xml:space="preserve">
    <value>Code Generation</value>
    <comment>Category for DomainProperty &apos;BaseClassName&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/GeneratesDoubleDerived.Description" xml:space="preserve">
    <value>If true, will generate a base class with all functionality and a derived partial class to support customization through overrides.</value>
    <comment>Description for DomainProperty &apos;GeneratesDoubleDerived&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/GeneratesDoubleDerived.DisplayName" xml:space="preserve">
    <value>Generates Double Derived</value>
    <comment>DisplayName for DomainProperty &apos;GeneratesDoubleDerived&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/GeneratesDoubleDerived.Category" xml:space="preserve">
    <value>Code Generation</value>
    <comment>Category for DomainProperty &apos;GeneratesDoubleDerived&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/DoubleDerivedNameSuffix.Description" xml:space="preserve">
    <value>Suffix appended to base class names in double derived code generation. Defaults to &quot;Base&quot;, if not supplied.</value>
    <comment>Description for DomainProperty &apos;DoubleDerivedNameSuffix&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/DoubleDerivedNameSuffix.DisplayName" xml:space="preserve">
    <value>Double Derived Name Suffix</value>
    <comment>DisplayName for DomainProperty &apos;DoubleDerivedNameSuffix&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/UseGeneratedCodeAttribute.Description" xml:space="preserve">
    <value>Instructs ActiveWriter to decorate each class with GeneratedCodeAttribute. Some tools evaluate existance of this attribute to handle code differently.</value>
    <comment>Description for DomainProperty &apos;UseGeneratedCodeAttribute&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/UseGeneratedCodeAttribute.DisplayName" xml:space="preserve">
    <value>Use GeneratedCodeAttribute</value>
    <comment>DisplayName for DomainProperty &apos;UseGeneratedCodeAttribute&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/UseGeneratedCodeAttribute.Category" xml:space="preserve">
    <value>Code Generation</value>
    <comment>Category for DomainProperty &apos;UseGeneratedCodeAttribute&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/Target.Description" xml:space="preserve">
    <value>Defines the experimental code generation target.</value>
    <comment>Description for DomainProperty &apos;Target&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/Target.DisplayName" xml:space="preserve">
    <value>Target</value>
    <comment>DisplayName for DomainProperty &apos;Target&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/Target.Category" xml:space="preserve">
    <value>Code Generation</value>
    <comment>Category for DomainProperty &apos;Target&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/AssemblyPath.Description" xml:space="preserve">
    <value>Provides assembly load path for Castle.ActiveRecord.dll and related assemblies. If required assemblies are in GAC, this setting is omitted. If not and is this setting is blank, or required assemblies not found under the given path if they are not in the GAC, an error will be thrown during code generation.</value>
    <comment>Description for DomainProperty &apos;AssemblyPath&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/AssemblyPath.DisplayName" xml:space="preserve">
    <value>Assembly Path</value>
    <comment>DisplayName for DomainProperty &apos;AssemblyPath&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/AssemblyPath.Category" xml:space="preserve">
    <value>Code Generation (NHibernate)</value>
    <comment>Category for DomainProperty &apos;AssemblyPath&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/ActiveRecordAssemblyName.Description" xml:space="preserve">
    <value>Provides assembly name to be used during code generation. You can provide a fully qualified assembly name to target a specific version from the GAC.</value>
    <comment>Description for DomainProperty &apos;ActiveRecordAssemblyName&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/ActiveRecordAssemblyName.DisplayName" xml:space="preserve">
    <value>Active Record Assembly Name</value>
    <comment>DisplayName for DomainProperty &apos;ActiveRecordAssemblyName&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/ActiveRecordAssemblyName.Category" xml:space="preserve">
    <value>Code Generation (NHibernate)</value>
    <comment>Category for DomainProperty &apos;ActiveRecordAssemblyName&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/NHibernateAssemblyName.Description" xml:space="preserve">
    <value>Provides assembly name to be used during code generation. You can provide a fully qualified assembly name to target a specific version from the GAC.</value>
    <comment>Description for DomainProperty &apos;NHibernateAssemblyName&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/NHibernateAssemblyName.DisplayName" xml:space="preserve">
    <value>NHibernate Assembly Name</value>
    <comment>DisplayName for DomainProperty &apos;NHibernateAssemblyName&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/NHibernateAssemblyName.Category" xml:space="preserve">
    <value>Code Generation (NHibernate)</value>
    <comment>Category for DomainProperty &apos;NHibernateAssemblyName&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/RelateWithActiwFile.Description" xml:space="preserve">
    <value>Instructs ActiveWriter to add hbm.xml file as a nested file of this .actiw file. Otherwise, file will be added as a standalone item to the project.</value>
    <comment>Description for DomainProperty &apos;RelateWithActiwFile&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/RelateWithActiwFile.DisplayName" xml:space="preserve">
    <value>Relate With Actiw File</value>
    <comment>DisplayName for DomainProperty &apos;RelateWithActiwFile&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/RelateWithActiwFile.Category" xml:space="preserve">
    <value>Code Generation (NHibernate)</value>
    <comment>Category for DomainProperty &apos;RelateWithActiwFile&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/UseVirtualProperties.Description" xml:space="preserve">
    <value>Instructs ActiveWriter to generate virtual properties where possible.</value>
    <comment>Description for DomainProperty &apos;UseVirtualProperties&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/UseVirtualProperties.DisplayName" xml:space="preserve">
    <value>Use Virtual Properties</value>
    <comment>DisplayName for DomainProperty &apos;UseVirtualProperties&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/UseVirtualProperties.Category" xml:space="preserve">
    <value>Code Generation</value>
    <comment>Category for DomainProperty &apos;UseVirtualProperties&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/Namespace.Description" xml:space="preserve">
    <value>The namespace to be used in generated code. If not supplied (default), ActiveWriter will use the namespace from the native project structure.</value>
    <comment>Description for DomainProperty &apos;Namespace&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/Namespace.DisplayName" xml:space="preserve">
    <value>Namespace</value>
    <comment>DisplayName for DomainProperty &apos;Namespace&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/Namespace.Category" xml:space="preserve">
    <value>Code Generation</value>
    <comment>Category for DomainProperty &apos;Namespace&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/AdditionalImports.Description" xml:space="preserve">
    <value>List of additional imports to be added to the generated class.</value>
    <comment>Description for DomainProperty &apos;AdditionalImports&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/AdditionalImports.DisplayName" xml:space="preserve">
    <value>Additional Imports</value>
    <comment>DisplayName for DomainProperty &apos;AdditionalImports&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/AdditionalImports.Category" xml:space="preserve">
    <value>Code Generation</value>
    <comment>Category for DomainProperty &apos;AdditionalImports&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/ImplementINotifyPropertyChanged.Description" xml:space="preserve">
    <value>Instructs ActiveWriter to implement INotifyPropertyChanged interface in each class generated. This setting is overridable in class level.</value>
    <comment>Description for DomainProperty &apos;ImplementINotifyPropertyChanged&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/ImplementINotifyPropertyChanged.DisplayName" xml:space="preserve">
    <value>Implement  INotifyPropertyChanged</value>
    <comment>DisplayName for DomainProperty &apos;ImplementINotifyPropertyChanged&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/ImplementINotifyPropertyChanged.Category" xml:space="preserve">
    <value>Code Generation</value>
    <comment>Category for DomainProperty &apos;ImplementINotifyPropertyChanged&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/GenerateMetaData.Description" xml:space="preserve">
    <value>Instructs ActiveWriter to generate property metadata to allow typed access to property names.</value>
    <comment>Description for DomainProperty &apos;GenerateMetaData&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/GenerateMetaData.DisplayName" xml:space="preserve">
    <value>Generate Meta Data</value>
    <comment>DisplayName for DomainProperty &apos;GenerateMetaData&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/GenerateMetaData.Category" xml:space="preserve">
    <value>Code Generation</value>
    <comment>Category for DomainProperty &apos;GenerateMetaData&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/UseNHQG.Description" xml:space="preserve">
    <value>Instructs ActiveWriter to post process generated code with NHibernate Query Generator to generate helper Criteria API constructs. For more information on NHQG, visit http://www.ayende.com</value>
    <comment>Description for DomainProperty &apos;UseNHQG&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/UseNHQG.DisplayName" xml:space="preserve">
    <value>Use NHQG</value>
    <comment>DisplayName for DomainProperty &apos;UseNHQG&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/UseNHQG.Category" xml:space="preserve">
    <value>Code Generation (NHibernate)</value>
    <comment>Category for DomainProperty &apos;UseNHQG&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/NHQGExecutable.Description" xml:space="preserve">
    <value>Executable path for NHQG.exe</value>
    <comment>Description for DomainProperty &apos;NHQGExecutable&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/NHQGExecutable.DisplayName" xml:space="preserve">
    <value>NHQG Executable</value>
    <comment>DisplayName for DomainProperty &apos;NHQGExecutable&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/NHQGExecutable.Category" xml:space="preserve">
    <value>Code Generation (NHibernate)</value>
    <comment>Category for DomainProperty &apos;NHQGExecutable&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/UseGenericRelations.Description" xml:space="preserve">
    <value>Instructs ActiveWriter to generate code using generic collections for class relations where possible. This setting is overridable in class level.</value>
    <comment>Description for DomainProperty &apos;UseGenericRelations&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/UseGenericRelations.DisplayName" xml:space="preserve">
    <value>Use Generic Relations</value>
    <comment>DisplayName for DomainProperty &apos;UseGenericRelations&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/UseGenericRelations.Category" xml:space="preserve">
    <value>Code Generation</value>
    <comment>Category for DomainProperty &apos;UseGenericRelations&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/PropertyNameFilterExpression.Description" xml:space="preserve">
    <value>A regular expression to apply to all property names. MAtches will bereplaced with empty strings.</value>
    <comment>Description for DomainProperty &apos;PropertyNameFilterExpression&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/PropertyNameFilterExpression.DisplayName" xml:space="preserve">
    <value>Property Name Filter Expression</value>
    <comment>DisplayName for DomainProperty &apos;PropertyNameFilterExpression&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/PropertyNameFilterExpression.Category" xml:space="preserve">
    <value>Code Generation</value>
    <comment>Category for DomainProperty &apos;PropertyNameFilterExpression&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/InitializeIListFields.Description" xml:space="preserve">
    <value>Initializas private IList fields with List concrete type.</value>
    <comment>Description for DomainProperty &apos;InitializeIListFields&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/InitializeIListFields.DisplayName" xml:space="preserve">
    <value>Initialize IList Fields</value>
    <comment>DisplayName for DomainProperty &apos;InitializeIListFields&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/InitializeIListFields.Category" xml:space="preserve">
    <value>Code Generation</value>
    <comment>Category for DomainProperty &apos;InitializeIListFields&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/ImplementINotifyPropertyChanging.Description" xml:space="preserve">
    <value>Instructs ActiveWriter to implement INotifyPropertyChanging interface in each class generated. This setting is overridable in class level.</value>
    <comment>Description for DomainProperty &apos;ImplementINotifyPropertyChanging&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/ImplementINotifyPropertyChanging.DisplayName" xml:space="preserve">
    <value>Implement INotifyPropertyChanging</value>
    <comment>DisplayName for DomainProperty &apos;ImplementINotifyPropertyChanging&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/ImplementINotifyPropertyChanging.Category" xml:space="preserve">
    <value>Code Generation</value>
    <comment>Category for DomainProperty &apos;ImplementINotifyPropertyChanging&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/CollectionInterface.Description" xml:space="preserve">
    <value>Interface to use for collections.  If none is specified, IList will be used.</value>
    <comment>Description for DomainProperty &apos;CollectionInterface&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/CollectionInterface.DisplayName" xml:space="preserve">
    <value>Collection Interface</value>
    <comment>DisplayName for DomainProperty &apos;CollectionInterface&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/CollectionInterface.Category" xml:space="preserve">
    <value>Code Generation</value>
    <comment>Category for DomainProperty &apos;CollectionInterface&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/CollectionImplementation.Description" xml:space="preserve">
    <value>Concrete class to instantiate for list fields if InitializeIListFields is set to true.</value>
    <comment>Description for DomainProperty &apos;CollectionImplementation&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/CollectionImplementation.DisplayName" xml:space="preserve">
    <value>Collection Implementation</value>
    <comment>DisplayName for DomainProperty &apos;CollectionImplementation&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/CollectionImplementation.Category" xml:space="preserve">
    <value>Code Generation</value>
    <comment>Category for DomainProperty &apos;CollectionImplementation&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/ManyToManyRelationType.Description" xml:space="preserve">
    <value>Default relation type used by ManyToMany relationships.</value>
    <comment>Description for DomainProperty &apos;ManyToManyRelationType&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/ManyToManyRelationType.DisplayName" xml:space="preserve">
    <value>Many To Many Relation Type</value>
    <comment>DisplayName for DomainProperty &apos;ManyToManyRelationType&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/ManyToManyRelationType.Category" xml:space="preserve">
    <value>Code Generation</value>
    <comment>Category for DomainProperty &apos;ManyToManyRelationType&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/ManyToOneRelationType.Description" xml:space="preserve">
    <value>Default relation type used by ManyToOne relationships.</value>
    <comment>Description for DomainProperty &apos;ManyToOneRelationType&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/ManyToOneRelationType.DisplayName" xml:space="preserve">
    <value>Many To One Relation Type</value>
    <comment>DisplayName for DomainProperty &apos;ManyToOneRelationType&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/ManyToOneRelationType.Category" xml:space="preserve">
    <value>Code Generation</value>
    <comment>Category for DomainProperty &apos;ManyToOneRelationType&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/ManyToManyCollectionIDColumnFormat.Description" xml:space="preserve">
    <value>This column name is used for many to many collection ID definition.  If a column name is specified in the relationship itself, the Column Type and Generator specified in the relationship will be used instead of those specified here in the model.  Any {0} specified in the format will be replaced with the table name in the same way as Common Primary Key Format.  If no format is specified here or in the many to many relationships, the generation system will fall back to the Common Primary Key information.</value>
    <comment>Description for DomainProperty &apos;ManyToManyCollectionIDColumnFormat&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/ManyToManyCollectionIDColumnFormat.DisplayName" xml:space="preserve">
    <value>Many To Many Collection ID Column Format</value>
    <comment>DisplayName for DomainProperty &apos;ManyToManyCollectionIDColumnFormat&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/ManyToManyCollectionIDColumnFormat.Category" xml:space="preserve">
    <value>Code Generation</value>
    <comment>Category for DomainProperty &apos;ManyToManyCollectionIDColumnFormat&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/ManyToManyCollectionIDColumnType.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.Model.Many To Many Collection ID Column Type</value>
    <comment>Description for DomainProperty &apos;ManyToManyCollectionIDColumnType&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/ManyToManyCollectionIDColumnType.DisplayName" xml:space="preserve">
    <value>Many To Many Collection ID Column Type</value>
    <comment>DisplayName for DomainProperty &apos;ManyToManyCollectionIDColumnType&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/ManyToManyCollectionIDColumnType.Category" xml:space="preserve">
    <value>Code Generation</value>
    <comment>Category for DomainProperty &apos;ManyToManyCollectionIDColumnType&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/ManyToManyCollectionIDGenerator.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.Model.Many To Many Collection ID Generator</value>
    <comment>Description for DomainProperty &apos;ManyToManyCollectionIDGenerator&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/ManyToManyCollectionIDGenerator.DisplayName" xml:space="preserve">
    <value>Many To Many Collection ID Generator</value>
    <comment>DisplayName for DomainProperty &apos;ManyToManyCollectionIDGenerator&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/ManyToManyCollectionIDGenerator.Category" xml:space="preserve">
    <value>Code Generation</value>
    <comment>Category for DomainProperty &apos;ManyToManyCollectionIDGenerator&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/ManyToManyIUserCollectionType.Description" xml:space="preserve">
    <value>The type deriving from NHibernate.UserTypes.IUserCollectionType for collections.  This is used unless the collection type is specified in the ManyToMany relationship.</value>
    <comment>Description for DomainProperty &apos;ManyToManyIUserCollectionType&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/ManyToManyIUserCollectionType.DisplayName" xml:space="preserve">
    <value>Many To Many IUserCollectionType</value>
    <comment>DisplayName for DomainProperty &apos;ManyToManyIUserCollectionType&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/ManyToManyIUserCollectionType.Category" xml:space="preserve">
    <value>Code Generation</value>
    <comment>Category for DomainProperty &apos;ManyToManyIUserCollectionType&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/ManyToOneIUserCollectionType.Description" xml:space="preserve">
    <value>The type deriving from NHibernate.UserTypes.IUserCollectionType for collections.  This is used unless the collection type is specified in the ManyToOne relationship.</value>
    <comment>Description for DomainProperty &apos;ManyToOneIUserCollectionType&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/ManyToOneIUserCollectionType.DisplayName" xml:space="preserve">
    <value>Many To One IUserCollectionType</value>
    <comment>DisplayName for DomainProperty &apos;ManyToOneIUserCollectionType&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/ManyToOneIUserCollectionType.Category" xml:space="preserve">
    <value>Code Generation</value>
    <comment>Category for DomainProperty &apos;ManyToOneIUserCollectionType&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/AutomaticAssociations.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.Model.Automatic Associations</value>
    <comment>Description for DomainProperty &apos;AutomaticAssociations&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/AutomaticAssociations.DisplayName" xml:space="preserve">
    <value>Automatic Associations</value>
    <comment>DisplayName for DomainProperty &apos;AutomaticAssociations&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/AutomaticAssociations.Category" xml:space="preserve">
    <value>Code Generation</value>
    <comment>Category for DomainProperty &apos;AutomaticAssociations&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/AutomaticAssociationCollectionImplementation.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.Model.Automatic Association Collection Implementation</value>
    <comment>Description for DomainProperty &apos;AutomaticAssociationCollectionImplementation&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/AutomaticAssociationCollectionImplementation.DisplayName" xml:space="preserve">
    <value>Automatic Association Collection Implementation</value>
    <comment>DisplayName for DomainProperty &apos;AutomaticAssociationCollectionImplementation&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/AutomaticAssociationCollectionImplementation.Category" xml:space="preserve">
    <value>Code Generation</value>
    <comment>Category for DomainProperty &apos;AutomaticAssociationCollectionImplementation&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/ManyToManyTableFormat.Description" xml:space="preserve">
    <value>The format used by default for many-to-many table names.  {0} is replaced by the source class name and {1} is replaced by the target class name.</value>
    <comment>Description for DomainProperty &apos;ManyToManyTableFormat&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/ManyToManyTableFormat.DisplayName" xml:space="preserve">
    <value>Many To Many Table Format</value>
    <comment>DisplayName for DomainProperty &apos;ManyToManyTableFormat&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/ForeignKeyFormat.Description" xml:space="preserve">
    <value>The format string used by default for foreign key relationships.  {0} is replaced with the property or class name.  A common format string might be: {0}_ID</value>
    <comment>Description for DomainProperty &apos;ForeignKeyFormat&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/ForeignKeyFormat.DisplayName" xml:space="preserve">
    <value>Foreign Key Format</value>
    <comment>DisplayName for DomainProperty &apos;ForeignKeyFormat&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/CommonPrimaryKeyPropertyFormat.Description" xml:space="preserve">
    <value>If no other primary key is specified, a primary key will be generated with this format.  {0} will be replaced with the class name.  As an example, {0}Id would generate SomeClassId as the primary key property for SomeClass.  If left blank, no primary keys will be added to classes without existing primary keys.</value>
    <comment>Description for DomainProperty &apos;CommonPrimaryKeyPropertyFormat&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/CommonPrimaryKeyPropertyFormat.DisplayName" xml:space="preserve">
    <value>Common Primary Key Property Format</value>
    <comment>DisplayName for DomainProperty &apos;CommonPrimaryKeyPropertyFormat&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/CommonPrimaryKeyPropertyFormat.Category" xml:space="preserve">
    <value>Surrogate Primary Key</value>
    <comment>Category for DomainProperty &apos;CommonPrimaryKeyPropertyFormat&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/CommonPrimaryKeyColumnFormat.Description" xml:space="preserve">
    <value>The column name used for the common primary key property.  If not specified, the name of the property will be used.  {0} will be replaced with the name of the table.  For example, you could use the table name with a standard suffix: {0}_ID</value>
    <comment>Description for DomainProperty &apos;CommonPrimaryKeyColumnFormat&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/CommonPrimaryKeyColumnFormat.DisplayName" xml:space="preserve">
    <value>Common Primary Key Column Format</value>
    <comment>DisplayName for DomainProperty &apos;CommonPrimaryKeyColumnFormat&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/CommonPrimaryKeyColumnFormat.Category" xml:space="preserve">
    <value>Surrogate Primary Key</value>
    <comment>Category for DomainProperty &apos;CommonPrimaryKeyColumnFormat&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/CommonPrimaryKeyColumnType.Description" xml:space="preserve">
    <value>NHibernate type for common primary key.</value>
    <comment>Description for DomainProperty &apos;CommonPrimaryKeyColumnType&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/CommonPrimaryKeyColumnType.DisplayName" xml:space="preserve">
    <value>Common Primary Key Column Type</value>
    <comment>DisplayName for DomainProperty &apos;CommonPrimaryKeyColumnType&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/CommonPrimaryKeyColumnType.Category" xml:space="preserve">
    <value>Surrogate Primary Key</value>
    <comment>Category for DomainProperty &apos;CommonPrimaryKeyColumnType&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/CommonPrimaryKeyGenerator.Description" xml:space="preserve">
    <value>Generator type for common primary key.</value>
    <comment>Description for DomainProperty &apos;CommonPrimaryKeyGenerator&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/CommonPrimaryKeyGenerator.DisplayName" xml:space="preserve">
    <value>Common Primary Key Generator</value>
    <comment>DisplayName for DomainProperty &apos;CommonPrimaryKeyGenerator&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/CommonPrimaryKeyGenerator.Category" xml:space="preserve">
    <value>Surrogate Primary Key</value>
    <comment>Category for DomainProperty &apos;CommonPrimaryKeyGenerator&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/MemberTemplateFile.Description" xml:space="preserve">
    <value>Methods and propeties from the single class within the template file will be imported, transformed, and then placed in the generated output.  As an example, you could specify the ActiveRecordBase.Generic.cs file and the generic methods would be transformed into specific methods for each class.  The first generic type parameter is replaced with the generated class type.  There are additional transformations for subclasses.  The path to the source file is relative to the .actiw file.  If the path has &quot;...&quot; in it, all parent folders are searched upwards until a match is found.  For example, &quot;...\ActiveRecord\ActiveRecordBase.generic.cs&quot; would look for &quot;ActiveRecord\ActiveRecordBase.generic.cs&quot; in the folder containing the .actiw file and in all folders up to the root.</value>
    <comment>Description for DomainProperty &apos;MemberTemplateFile&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/MemberTemplateFile.DisplayName" xml:space="preserve">
    <value>Member Template File</value>
    <comment>DisplayName for DomainProperty &apos;MemberTemplateFile&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/BaseClassPropertyChangedMethod.Description" xml:space="preserve">
    <value>If there is already a PropertyChanged event defined in the base class, specify the name of a method that takes a single string that can be used to invoke it.</value>
    <comment>Description for DomainProperty &apos;BaseClassPropertyChangedMethod&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/BaseClassPropertyChangedMethod.DisplayName" xml:space="preserve">
    <value>Base Class Property Changed Method</value>
    <comment>DisplayName for DomainProperty &apos;BaseClassPropertyChangedMethod&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/BaseClassPropertyChangedMethod.Category" xml:space="preserve">
    <value>Code Generation</value>
    <comment>Category for DomainProperty &apos;BaseClassPropertyChangedMethod&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/BaseClassPropertyChangingMethod.Description" xml:space="preserve">
    <value>If there is already a PropertyChanging event defined in the base class, specify the name of a method that takes a single string that can be used to invoke it.</value>
    <comment>Description for DomainProperty &apos;BaseClassPropertyChangingMethod&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/BaseClassPropertyChangingMethod.DisplayName" xml:space="preserve">
    <value>Base Class Property Changing Method</value>
    <comment>DisplayName for DomainProperty &apos;BaseClassPropertyChangingMethod&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/BaseClassPropertyChangingMethod.Category" xml:space="preserve">
    <value>Code Generation</value>
    <comment>Category for DomainProperty &apos;BaseClassPropertyChangingMethod&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/Access.Description" xml:space="preserve">
    <value>Global property access setting.  Can be overridden at class or property level.</value>
    <comment>Description for DomainProperty &apos;Access&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/Access.DisplayName" xml:space="preserve">
    <value>Access</value>
    <comment>DisplayName for DomainProperty &apos;Access&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Model/Access.Category" xml:space="preserve">
    <value>Code Generation</value>
    <comment>Category for DomainProperty &apos;Access&apos; on DomainClass &apos;Model&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelClass.Description" xml:space="preserve">
    <value>A class of the domain</value>
    <comment>Description for DomainClass &apos;ModelClass&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelClass.DisplayName" xml:space="preserve">
    <value>Model Class</value>
    <comment>DisplayName for DomainClass &apos;ModelClass&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelClass/Cache.Description" xml:space="preserve">
    <value></value>
    <comment>Description for DomainProperty &apos;Cache&apos; on DomainClass &apos;ModelClass&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelClass/Cache.DisplayName" xml:space="preserve">
    <value>Cache</value>
    <comment>DisplayName for DomainProperty &apos;Cache&apos; on DomainClass &apos;ModelClass&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelClass/Cache.Category" xml:space="preserve">
    <value>ActiveRecord</value>
    <comment>Category for DomainProperty &apos;Cache&apos; on DomainClass &apos;ModelClass&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelClass/DiscriminatorColumn.Description" xml:space="preserve">
    <value>Discriminator column for a table inheritance modeling</value>
    <comment>Description for DomainProperty &apos;DiscriminatorColumn&apos; on DomainClass &apos;ModelClass&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelClass/DiscriminatorColumn.DisplayName" xml:space="preserve">
    <value>Discriminator Column</value>
    <comment>DisplayName for DomainProperty &apos;DiscriminatorColumn&apos; on DomainClass &apos;ModelClass&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelClass/DiscriminatorColumn.Category" xml:space="preserve">
    <value>ActiveRecord</value>
    <comment>Category for DomainProperty &apos;DiscriminatorColumn&apos; on DomainClass &apos;ModelClass&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelClass/DiscriminatorType.Description" xml:space="preserve">
    <value>Column type (like string or integer) for the discriminator column</value>
    <comment>Description for DomainProperty &apos;DiscriminatorType&apos; on DomainClass &apos;ModelClass&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelClass/DiscriminatorType.DisplayName" xml:space="preserve">
    <value>Discriminator Type</value>
    <comment>DisplayName for DomainProperty &apos;DiscriminatorType&apos; on DomainClass &apos;ModelClass&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelClass/DiscriminatorType.Category" xml:space="preserve">
    <value>ActiveRecord</value>
    <comment>Category for DomainProperty &apos;DiscriminatorType&apos; on DomainClass &apos;ModelClass&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelClass/DiscriminatorValue.Description" xml:space="preserve">
    <value>Value that represents the target class on the discriminator column</value>
    <comment>Description for DomainProperty &apos;DiscriminatorValue&apos; on DomainClass &apos;ModelClass&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelClass/DiscriminatorValue.DisplayName" xml:space="preserve">
    <value>Discriminator Value</value>
    <comment>DisplayName for DomainProperty &apos;DiscriminatorValue&apos; on DomainClass &apos;ModelClass&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelClass/DiscriminatorValue.Category" xml:space="preserve">
    <value>ActiveRecord</value>
    <comment>Category for DomainProperty &apos;DiscriminatorValue&apos; on DomainClass &apos;ModelClass&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelClass/Lazy.Description" xml:space="preserve">
    <value>Enable lazy loading for the type</value>
    <comment>Description for DomainProperty &apos;Lazy&apos; on DomainClass &apos;ModelClass&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelClass/Lazy.DisplayName" xml:space="preserve">
    <value>Lazy</value>
    <comment>DisplayName for DomainProperty &apos;Lazy&apos; on DomainClass &apos;ModelClass&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelClass/Lazy.Category" xml:space="preserve">
    <value>ActiveRecord</value>
    <comment>Category for DomainProperty &apos;Lazy&apos; on DomainClass &apos;ModelClass&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelClass/Proxy.Description" xml:space="preserve">
    <value>Associates a proxy type with the target type</value>
    <comment>Description for DomainProperty &apos;Proxy&apos; on DomainClass &apos;ModelClass&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelClass/Proxy.DisplayName" xml:space="preserve">
    <value>Proxy</value>
    <comment>DisplayName for DomainProperty &apos;Proxy&apos; on DomainClass &apos;ModelClass&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelClass/Proxy.Category" xml:space="preserve">
    <value>ActiveRecord</value>
    <comment>Category for DomainProperty &apos;Proxy&apos; on DomainClass &apos;ModelClass&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelClass/Schema.Description" xml:space="preserve">
    <value>Schema name associated with the type</value>
    <comment>Description for DomainProperty &apos;Schema&apos; on DomainClass &apos;ModelClass&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelClass/Schema.DisplayName" xml:space="preserve">
    <value>Schema</value>
    <comment>DisplayName for DomainProperty &apos;Schema&apos; on DomainClass &apos;ModelClass&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelClass/Schema.Category" xml:space="preserve">
    <value>ActiveRecord</value>
    <comment>Category for DomainProperty &apos;Schema&apos; on DomainClass &apos;ModelClass&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelClass/Table.Description" xml:space="preserve">
    <value>Table name associated with the type</value>
    <comment>Description for DomainProperty &apos;Table&apos; on DomainClass &apos;ModelClass&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelClass/Table.DisplayName" xml:space="preserve">
    <value>Table</value>
    <comment>DisplayName for DomainProperty &apos;Table&apos; on DomainClass &apos;ModelClass&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelClass/Table.Category" xml:space="preserve">
    <value>ActiveRecord</value>
    <comment>Category for DomainProperty &apos;Table&apos; on DomainClass &apos;ModelClass&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelClass/Where.Description" xml:space="preserve">
    <value>SQL condition to retrieve objects</value>
    <comment>Description for DomainProperty &apos;Where&apos; on DomainClass &apos;ModelClass&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelClass/Where.DisplayName" xml:space="preserve">
    <value>Where</value>
    <comment>DisplayName for DomainProperty &apos;Where&apos; on DomainClass &apos;ModelClass&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelClass/Where.Category" xml:space="preserve">
    <value>ActiveRecord</value>
    <comment>Category for DomainProperty &apos;Where&apos; on DomainClass &apos;ModelClass&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelClass/HasKeyProperty.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.ModelClass.Has Key Property</value>
    <comment>Description for DomainProperty &apos;HasKeyProperty&apos; on DomainClass &apos;ModelClass&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelClass/HasKeyProperty.DisplayName" xml:space="preserve">
    <value>Has Key Property</value>
    <comment>DisplayName for DomainProperty &apos;HasKeyProperty&apos; on DomainClass &apos;ModelClass&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelClass/IsValidatorSet.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.ModelClass.Is Validator Set</value>
    <comment>Description for DomainProperty &apos;IsValidatorSet&apos; on DomainClass &apos;ModelClass&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelClass/IsValidatorSet.DisplayName" xml:space="preserve">
    <value>Is Validator Set</value>
    <comment>DisplayName for DomainProperty &apos;IsValidatorSet&apos; on DomainClass &apos;ModelClass&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelClass/DynamicInsert.Description" xml:space="preserve">
    <value>Specifies that INSERT SQL should be generated at runtime and contains only the columns whose values are not null.</value>
    <comment>Description for DomainProperty &apos;DynamicInsert&apos; on DomainClass &apos;ModelClass&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelClass/DynamicInsert.DisplayName" xml:space="preserve">
    <value>Dynamic Insert</value>
    <comment>DisplayName for DomainProperty &apos;DynamicInsert&apos; on DomainClass &apos;ModelClass&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelClass/DynamicInsert.Category" xml:space="preserve">
    <value>ActiveRecord</value>
    <comment>Category for DomainProperty &apos;DynamicInsert&apos; on DomainClass &apos;ModelClass&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelClass/DynamicUpdate.Description" xml:space="preserve">
    <value>Specifies that UPDATE SQL should be generated at runtime and contains only those columns whose values have changed.</value>
    <comment>Description for DomainProperty &apos;DynamicUpdate&apos; on DomainClass &apos;ModelClass&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelClass/DynamicUpdate.DisplayName" xml:space="preserve">
    <value>Dynamic Update</value>
    <comment>DisplayName for DomainProperty &apos;DynamicUpdate&apos; on DomainClass &apos;ModelClass&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelClass/DynamicUpdate.Category" xml:space="preserve">
    <value>ActiveRecord</value>
    <comment>Category for DomainProperty &apos;DynamicUpdate&apos; on DomainClass &apos;ModelClass&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelClass/Persister.Description" xml:space="preserve">
    <value>Specifies a custom IEntityPersister.</value>
    <comment>Description for DomainProperty &apos;Persister&apos; on DomainClass &apos;ModelClass&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelClass/Persister.DisplayName" xml:space="preserve">
    <value>Persister</value>
    <comment>DisplayName for DomainProperty &apos;Persister&apos; on DomainClass &apos;ModelClass&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelClass/Persister.Category" xml:space="preserve">
    <value>ActiveRecord</value>
    <comment>Category for DomainProperty &apos;Persister&apos; on DomainClass &apos;ModelClass&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelClass/SelectBeforeUpdate.Description" xml:space="preserve">
    <value>Specifies that NHibernate should never perform an SQL UPDATE unless it is certain that an  object is actually modified. In certain cases (actually, only when a transient object has been associated with a new session using update()), this means that NHibernate will perform an extra SQL SELECT to determine if an UPDATE is actually required.</value>
    <comment>Description for DomainProperty &apos;SelectBeforeUpdate&apos; on DomainClass &apos;ModelClass&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelClass/SelectBeforeUpdate.DisplayName" xml:space="preserve">
    <value>Select Before Update</value>
    <comment>DisplayName for DomainProperty &apos;SelectBeforeUpdate&apos; on DomainClass &apos;ModelClass&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelClass/SelectBeforeUpdate.Category" xml:space="preserve">
    <value>ActiveRecord</value>
    <comment>Category for DomainProperty &apos;SelectBeforeUpdate&apos; on DomainClass &apos;ModelClass&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelClass/Polymorphism.Description" xml:space="preserve">
    <value>Determines whether implicit or explicit query polymorphism is used.</value>
    <comment>Description for DomainProperty &apos;Polymorphism&apos; on DomainClass &apos;ModelClass&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelClass/Polymorphism.DisplayName" xml:space="preserve">
    <value>Polymorphism</value>
    <comment>DisplayName for DomainProperty &apos;Polymorphism&apos; on DomainClass &apos;ModelClass&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelClass/Polymorphism.Category" xml:space="preserve">
    <value>ActiveRecord</value>
    <comment>Category for DomainProperty &apos;Polymorphism&apos; on DomainClass &apos;ModelClass&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelClass/Mutable.Description" xml:space="preserve">
    <value>Specifies that instances of the class are (not) mutable.</value>
    <comment>Description for DomainProperty &apos;Mutable&apos; on DomainClass &apos;ModelClass&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelClass/Mutable.DisplayName" xml:space="preserve">
    <value>Mutable</value>
    <comment>DisplayName for DomainProperty &apos;Mutable&apos; on DomainClass &apos;ModelClass&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelClass/Mutable.Category" xml:space="preserve">
    <value>ActiveRecord</value>
    <comment>Category for DomainProperty &apos;Mutable&apos; on DomainClass &apos;ModelClass&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelClass/BatchSize.Description" xml:space="preserve">
    <value>Specify a &quot;batch size&quot; for fetching instances of this class by identifier.</value>
    <comment>Description for DomainProperty &apos;BatchSize&apos; on DomainClass &apos;ModelClass&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelClass/BatchSize.DisplayName" xml:space="preserve">
    <value>Batch Size</value>
    <comment>DisplayName for DomainProperty &apos;BatchSize&apos; on DomainClass &apos;ModelClass&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelClass/BatchSize.Category" xml:space="preserve">
    <value>ActiveRecord</value>
    <comment>Category for DomainProperty &apos;BatchSize&apos; on DomainClass &apos;ModelClass&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelClass/Locking.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.ModelClass.Locking</value>
    <comment>Description for DomainProperty &apos;Locking&apos; on DomainClass &apos;ModelClass&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelClass/Locking.DisplayName" xml:space="preserve">
    <value>Locking</value>
    <comment>DisplayName for DomainProperty &apos;Locking&apos; on DomainClass &apos;ModelClass&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelClass/Locking.Category" xml:space="preserve">
    <value>ActiveRecord</value>
    <comment>Category for DomainProperty &apos;Locking&apos; on DomainClass &apos;ModelClass&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelClass/UseAutoImport.Description" xml:space="preserve">
    <value>The auto-import attribute lets us use unqualified class names in the query language, by default. The assembly and namespace attributes specify the assembly where persistent classes are located and the namespace they are declared in.</value>
    <comment>Description for DomainProperty &apos;UseAutoImport&apos; on DomainClass &apos;ModelClass&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelClass/UseAutoImport.DisplayName" xml:space="preserve">
    <value>Use Auto Import</value>
    <comment>DisplayName for DomainProperty &apos;UseAutoImport&apos; on DomainClass &apos;ModelClass&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelClass/UseAutoImport.Category" xml:space="preserve">
    <value>ActiveRecord</value>
    <comment>Category for DomainProperty &apos;UseAutoImport&apos; on DomainClass &apos;ModelClass&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelClass/BaseClassName.Description" xml:space="preserve">
    <value>If set and if model level base class usage is set, overrides any base class defined in the model.</value>
    <comment>Description for DomainProperty &apos;BaseClassName&apos; on DomainClass &apos;ModelClass&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelClass/BaseClassName.DisplayName" xml:space="preserve">
    <value>Base Class Name</value>
    <comment>DisplayName for DomainProperty &apos;BaseClassName&apos; on DomainClass &apos;ModelClass&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelClass/BaseClassName.Category" xml:space="preserve">
    <value>Code Generation</value>
    <comment>Category for DomainProperty &apos;BaseClassName&apos; on DomainClass &apos;ModelClass&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelClass/UseGenerics.Description" xml:space="preserve">
    <value>If set (other than Inherit), overrides model level generics generation for this class.</value>
    <comment>Description for DomainProperty &apos;UseGenerics&apos; on DomainClass &apos;ModelClass&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelClass/UseGenerics.DisplayName" xml:space="preserve">
    <value>Use Generics</value>
    <comment>DisplayName for DomainProperty &apos;UseGenerics&apos; on DomainClass &apos;ModelClass&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelClass/UseGenerics.Category" xml:space="preserve">
    <value>Code Generation</value>
    <comment>Category for DomainProperty &apos;UseGenerics&apos; on DomainClass &apos;ModelClass&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelClass/ImplementINotifyPropertyChanged.Description" xml:space="preserve">
    <value>Instructs ActiveWriter to implement INotifyPropertyChanged interface in this class.</value>
    <comment>Description for DomainProperty &apos;ImplementINotifyPropertyChanged&apos; on DomainClass &apos;ModelClass&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelClass/ImplementINotifyPropertyChanged.DisplayName" xml:space="preserve">
    <value>Implement INotifyPropertyChanged</value>
    <comment>DisplayName for DomainProperty &apos;ImplementINotifyPropertyChanged&apos; on DomainClass &apos;ModelClass&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelClass/ImplementINotifyPropertyChanged.Category" xml:space="preserve">
    <value>Code Generation</value>
    <comment>Category for DomainProperty &apos;ImplementINotifyPropertyChanged&apos; on DomainClass &apos;ModelClass&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelClass/UseGenericRelations.Description" xml:space="preserve">
    <value>If set (other than Inherit), overrides model level generic relation generation for this class.</value>
    <comment>Description for DomainProperty &apos;UseGenericRelations&apos; on DomainClass &apos;ModelClass&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelClass/UseGenericRelations.DisplayName" xml:space="preserve">
    <value>Use Generic Relations</value>
    <comment>DisplayName for DomainProperty &apos;UseGenericRelations&apos; on DomainClass &apos;ModelClass&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelClass/UseGenericRelations.Category" xml:space="preserve">
    <value>Code Generation</value>
    <comment>Category for DomainProperty &apos;UseGenericRelations&apos; on DomainClass &apos;ModelClass&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelClass/ImplementINotifyPropertyChanging.Description" xml:space="preserve">
    <value>Instructs ActiveWriter to implement INotifyPropertyChanging interface in this class.</value>
    <comment>Description for DomainProperty &apos;ImplementINotifyPropertyChanging&apos; on DomainClass &apos;ModelClass&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelClass/ImplementINotifyPropertyChanging.DisplayName" xml:space="preserve">
    <value>Implement INotifyPropertyChanging</value>
    <comment>DisplayName for DomainProperty &apos;ImplementINotifyPropertyChanging&apos; on DomainClass &apos;ModelClass&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelClass/ImplementINotifyPropertyChanging.Category" xml:space="preserve">
    <value>Code Generation</value>
    <comment>Category for DomainProperty &apos;ImplementINotifyPropertyChanging&apos; on DomainClass &apos;ModelClass&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelProperty.Description" xml:space="preserve">
    <value>A property or field of a class</value>
    <comment>Description for DomainClass &apos;ModelProperty&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelProperty.DisplayName" xml:space="preserve">
    <value>Property</value>
    <comment>DisplayName for DomainClass &apos;ModelProperty&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelProperty/Column.Description" xml:space="preserve">
    <value></value>
    <comment>Description for DomainProperty &apos;Column&apos; on DomainClass &apos;ModelProperty&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelProperty/Column.DisplayName" xml:space="preserve">
    <value>Column</value>
    <comment>DisplayName for DomainProperty &apos;Column&apos; on DomainClass &apos;ModelProperty&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelProperty/Column.Category" xml:space="preserve">
    <value>ActiveRecord</value>
    <comment>Category for DomainProperty &apos;Column&apos; on DomainClass &apos;ModelProperty&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelProperty/ColumnType.Description" xml:space="preserve">
    <value></value>
    <comment>Description for DomainProperty &apos;ColumnType&apos; on DomainClass &apos;ModelProperty&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelProperty/ColumnType.DisplayName" xml:space="preserve">
    <value>Column Type</value>
    <comment>DisplayName for DomainProperty &apos;ColumnType&apos; on DomainClass &apos;ModelProperty&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelProperty/ColumnType.Category" xml:space="preserve">
    <value>ActiveRecord</value>
    <comment>Category for DomainProperty &apos;ColumnType&apos; on DomainClass &apos;ModelProperty&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelProperty/CustomColumnType.Description" xml:space="preserve">
    <value></value>
    <comment>Description for DomainProperty &apos;CustomColumnType&apos; on DomainClass &apos;ModelProperty&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelProperty/CustomColumnType.DisplayName" xml:space="preserve">
    <value>Custom Column Type</value>
    <comment>DisplayName for DomainProperty &apos;CustomColumnType&apos; on DomainClass &apos;ModelProperty&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelProperty/CustomColumnType.Category" xml:space="preserve">
    <value>ActiveRecord</value>
    <comment>Category for DomainProperty &apos;CustomColumnType&apos; on DomainClass &apos;ModelProperty&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelProperty/CustomMemberType.Description" xml:space="preserve">
    <value></value>
    <comment>Description for DomainProperty &apos;CustomMemberType&apos; on DomainClass &apos;ModelProperty&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelProperty/CustomMemberType.DisplayName" xml:space="preserve">
    <value>Custom Member Type</value>
    <comment>DisplayName for DomainProperty &apos;CustomMemberType&apos; on DomainClass &apos;ModelProperty&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelProperty/CustomMemberType.Category" xml:space="preserve">
    <value>ActiveRecord</value>
    <comment>Category for DomainProperty &apos;CustomMemberType&apos; on DomainClass &apos;ModelProperty&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelProperty/Formula.Description" xml:space="preserve">
    <value></value>
    <comment>Description for DomainProperty &apos;Formula&apos; on DomainClass &apos;ModelProperty&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelProperty/Formula.DisplayName" xml:space="preserve">
    <value>Formula</value>
    <comment>DisplayName for DomainProperty &apos;Formula&apos; on DomainClass &apos;ModelProperty&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelProperty/Formula.Category" xml:space="preserve">
    <value>ActiveRecord</value>
    <comment>Category for DomainProperty &apos;Formula&apos; on DomainClass &apos;ModelProperty&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelProperty/Insert.Description" xml:space="preserve">
    <value></value>
    <comment>Description for DomainProperty &apos;Insert&apos; on DomainClass &apos;ModelProperty&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelProperty/Insert.DisplayName" xml:space="preserve">
    <value>Insert</value>
    <comment>DisplayName for DomainProperty &apos;Insert&apos; on DomainClass &apos;ModelProperty&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelProperty/Insert.Category" xml:space="preserve">
    <value>ActiveRecord</value>
    <comment>Category for DomainProperty &apos;Insert&apos; on DomainClass &apos;ModelProperty&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelProperty/Length.Description" xml:space="preserve">
    <value></value>
    <comment>Description for DomainProperty &apos;Length&apos; on DomainClass &apos;ModelProperty&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelProperty/Length.DisplayName" xml:space="preserve">
    <value>Length</value>
    <comment>DisplayName for DomainProperty &apos;Length&apos; on DomainClass &apos;ModelProperty&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelProperty/Length.Category" xml:space="preserve">
    <value>ActiveRecord</value>
    <comment>Category for DomainProperty &apos;Length&apos; on DomainClass &apos;ModelProperty&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelProperty/NotNull.Description" xml:space="preserve">
    <value></value>
    <comment>Description for DomainProperty &apos;NotNull&apos; on DomainClass &apos;ModelProperty&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelProperty/NotNull.DisplayName" xml:space="preserve">
    <value>Not Null</value>
    <comment>DisplayName for DomainProperty &apos;NotNull&apos; on DomainClass &apos;ModelProperty&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelProperty/NotNull.Category" xml:space="preserve">
    <value>ActiveRecord</value>
    <comment>Category for DomainProperty &apos;NotNull&apos; on DomainClass &apos;ModelProperty&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelProperty/Unique.Description" xml:space="preserve">
    <value></value>
    <comment>Description for DomainProperty &apos;Unique&apos; on DomainClass &apos;ModelProperty&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelProperty/Unique.DisplayName" xml:space="preserve">
    <value>Unique</value>
    <comment>DisplayName for DomainProperty &apos;Unique&apos; on DomainClass &apos;ModelProperty&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelProperty/Unique.Category" xml:space="preserve">
    <value>ActiveRecord</value>
    <comment>Category for DomainProperty &apos;Unique&apos; on DomainClass &apos;ModelProperty&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelProperty/UnsavedValue.Description" xml:space="preserve">
    <value></value>
    <comment>Description for DomainProperty &apos;UnsavedValue&apos; on DomainClass &apos;ModelProperty&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelProperty/UnsavedValue.DisplayName" xml:space="preserve">
    <value>Unsaved Value</value>
    <comment>DisplayName for DomainProperty &apos;UnsavedValue&apos; on DomainClass &apos;ModelProperty&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelProperty/UnsavedValue.Category" xml:space="preserve">
    <value>ActiveRecord Primary Key</value>
    <comment>Category for DomainProperty &apos;UnsavedValue&apos; on DomainClass &apos;ModelProperty&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelProperty/Update.Description" xml:space="preserve">
    <value></value>
    <comment>Description for DomainProperty &apos;Update&apos; on DomainClass &apos;ModelProperty&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelProperty/Update.DisplayName" xml:space="preserve">
    <value>Update</value>
    <comment>DisplayName for DomainProperty &apos;Update&apos; on DomainClass &apos;ModelProperty&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelProperty/Update.Category" xml:space="preserve">
    <value>ActiveRecord</value>
    <comment>Category for DomainProperty &apos;Update&apos; on DomainClass &apos;ModelProperty&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelProperty/Generator.Description" xml:space="preserve">
    <value></value>
    <comment>Description for DomainProperty &apos;Generator&apos; on DomainClass &apos;ModelProperty&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelProperty/Generator.DisplayName" xml:space="preserve">
    <value>Generator</value>
    <comment>DisplayName for DomainProperty &apos;Generator&apos; on DomainClass &apos;ModelProperty&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelProperty/Generator.Category" xml:space="preserve">
    <value>ActiveRecord Primary Key</value>
    <comment>Category for DomainProperty &apos;Generator&apos; on DomainClass &apos;ModelProperty&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelProperty/KeyType.Description" xml:space="preserve">
    <value>Denotes if the property is a normal property, a key or part of of a primary key.</value>
    <comment>Description for DomainProperty &apos;KeyType&apos; on DomainClass &apos;ModelProperty&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelProperty/KeyType.DisplayName" xml:space="preserve">
    <value>Key Type</value>
    <comment>DisplayName for DomainProperty &apos;KeyType&apos; on DomainClass &apos;ModelProperty&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelProperty/KeyType.Category" xml:space="preserve">
    <value>ActiveRecord Primary Key</value>
    <comment>Category for DomainProperty &apos;KeyType&apos; on DomainClass &apos;ModelProperty&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelProperty/Params.Description" xml:space="preserve">
    <value></value>
    <comment>Description for DomainProperty &apos;Params&apos; on DomainClass &apos;ModelProperty&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelProperty/Params.DisplayName" xml:space="preserve">
    <value>Params</value>
    <comment>DisplayName for DomainProperty &apos;Params&apos; on DomainClass &apos;ModelProperty&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelProperty/Params.Category" xml:space="preserve">
    <value>ActiveRecord Primary Key</value>
    <comment>Category for DomainProperty &apos;Params&apos; on DomainClass &apos;ModelProperty&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelProperty/SequenceName.Description" xml:space="preserve">
    <value>Name of the sequence to be used for the primary key. Required when Generator is Sequence.</value>
    <comment>Description for DomainProperty &apos;SequenceName&apos; on DomainClass &apos;ModelProperty&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelProperty/SequenceName.DisplayName" xml:space="preserve">
    <value>Sequence Name</value>
    <comment>DisplayName for DomainProperty &apos;SequenceName&apos; on DomainClass &apos;ModelProperty&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelProperty/SequenceName.Category" xml:space="preserve">
    <value>ActiveRecord Primary Key</value>
    <comment>Category for DomainProperty &apos;SequenceName&apos; on DomainClass &apos;ModelProperty&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelProperty/Accessor.Description" xml:space="preserve">
    <value>Accessor of the property.</value>
    <comment>Description for DomainProperty &apos;Accessor&apos; on DomainClass &apos;ModelProperty&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelProperty/Accessor.DisplayName" xml:space="preserve">
    <value>Accessor</value>
    <comment>DisplayName for DomainProperty &apos;Accessor&apos; on DomainClass &apos;ModelProperty&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelProperty/Accessor.Category" xml:space="preserve">
    <value>Code Generation</value>
    <comment>Category for DomainProperty &apos;Accessor&apos; on DomainClass &apos;ModelProperty&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelProperty/CompositeKeyName.Description" xml:space="preserve">
    <value>Name of the composite key class to be generated.</value>
    <comment>Description for DomainProperty &apos;CompositeKeyName&apos; on DomainClass &apos;ModelProperty&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelProperty/CompositeKeyName.DisplayName" xml:space="preserve">
    <value>Composite Key Name</value>
    <comment>DisplayName for DomainProperty &apos;CompositeKeyName&apos; on DomainClass &apos;ModelProperty&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelProperty/CompositeKeyName.Category" xml:space="preserve">
    <value>Code Generation</value>
    <comment>Category for DomainProperty &apos;CompositeKeyName&apos; on DomainClass &apos;ModelProperty&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelProperty/PropertyType.Description" xml:space="preserve">
    <value>Type of the property.</value>
    <comment>Description for DomainProperty &apos;PropertyType&apos; on DomainClass &apos;ModelProperty&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelProperty/PropertyType.DisplayName" xml:space="preserve">
    <value>Property Type</value>
    <comment>DisplayName for DomainProperty &apos;PropertyType&apos; on DomainClass &apos;ModelProperty&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelProperty/PropertyType.Category" xml:space="preserve">
    <value>ActiveRecord</value>
    <comment>Category for DomainProperty &apos;PropertyType&apos; on DomainClass &apos;ModelProperty&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelProperty/DebuggerDisplay.Description" xml:space="preserve">
    <value>Decorates the class this property belongs to with DebuggerDisplay attribute, using this property as the display source. Example:  [DebuggerDisplay(&quot;Name = {Name}&quot;)]</value>
    <comment>Description for DomainProperty &apos;DebuggerDisplay&apos; on DomainClass &apos;ModelProperty&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelProperty/DebuggerDisplay.DisplayName" xml:space="preserve">
    <value>Debugger Display</value>
    <comment>DisplayName for DomainProperty &apos;DebuggerDisplay&apos; on DomainClass &apos;ModelProperty&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelProperty/DebuggerDisplay.Category" xml:space="preserve">
    <value>Code Generation</value>
    <comment>Category for DomainProperty &apos;DebuggerDisplay&apos; on DomainClass &apos;ModelProperty&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelProperty/Validator.Description" xml:space="preserve">
    <value>Defines validators to be used on the property.</value>
    <comment>Description for DomainProperty &apos;Validator&apos; on DomainClass &apos;ModelProperty&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelProperty/Validator.DisplayName" xml:space="preserve">
    <value>Validator</value>
    <comment>DisplayName for DomainProperty &apos;Validator&apos; on DomainClass &apos;ModelProperty&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelProperty/Validator.Category" xml:space="preserve">
    <value>ActiveRecord</value>
    <comment>Category for DomainProperty &apos;Validator&apos; on DomainClass &apos;ModelProperty&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelProperty/UniqueKey.Description" xml:space="preserve">
    <value>A unique-key attribute can be used to group columns in a single unit key constraint.</value>
    <comment>Description for DomainProperty &apos;UniqueKey&apos; on DomainClass &apos;ModelProperty&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelProperty/UniqueKey.DisplayName" xml:space="preserve">
    <value>Unique Key</value>
    <comment>DisplayName for DomainProperty &apos;UniqueKey&apos; on DomainClass &apos;ModelProperty&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelProperty/UniqueKey.Category" xml:space="preserve">
    <value>ActiveRecord</value>
    <comment>Category for DomainProperty &apos;UniqueKey&apos; on DomainClass &apos;ModelProperty&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelProperty/Index.Description" xml:space="preserve">
    <value>Specifies the name of a (multi-column) index.</value>
    <comment>Description for DomainProperty &apos;Index&apos; on DomainClass &apos;ModelProperty&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelProperty/Index.DisplayName" xml:space="preserve">
    <value>Index</value>
    <comment>DisplayName for DomainProperty &apos;Index&apos; on DomainClass &apos;ModelProperty&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelProperty/Index.Category" xml:space="preserve">
    <value>ActiveRecord</value>
    <comment>Category for DomainProperty &apos;Index&apos; on DomainClass &apos;ModelProperty&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelProperty/SqlType.Description" xml:space="preserve">
    <value>Overrides the default column type.</value>
    <comment>Description for DomainProperty &apos;SqlType&apos; on DomainClass &apos;ModelProperty&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelProperty/SqlType.DisplayName" xml:space="preserve">
    <value>Sql Type</value>
    <comment>DisplayName for DomainProperty &apos;SqlType&apos; on DomainClass &apos;ModelProperty&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelProperty/SqlType.Category" xml:space="preserve">
    <value>ActiveRecord</value>
    <comment>Category for DomainProperty &apos;SqlType&apos; on DomainClass &apos;ModelProperty&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelProperty/Check.Description" xml:space="preserve">
    <value>Create an SQL check constraint on either column or table.</value>
    <comment>Description for DomainProperty &apos;Check&apos; on DomainClass &apos;ModelProperty&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelProperty/Check.DisplayName" xml:space="preserve">
    <value>Check</value>
    <comment>DisplayName for DomainProperty &apos;Check&apos; on DomainClass &apos;ModelProperty&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelProperty/Check.Category" xml:space="preserve">
    <value>ActiveRecord</value>
    <comment>Category for DomainProperty &apos;Check&apos; on DomainClass &apos;ModelProperty&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelProperty/DefaultMember.Description" xml:space="preserve">
    <value>Decorates the class this property belongs to with DefaultMember attribute, using this property as the member source. Example:  [DefaultMember(&quot;Id&quot;)]</value>
    <comment>Description for DomainProperty &apos;DefaultMember&apos; on DomainClass &apos;ModelProperty&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelProperty/DefaultMember.DisplayName" xml:space="preserve">
    <value>Default Member</value>
    <comment>DisplayName for DomainProperty &apos;DefaultMember&apos; on DomainClass &apos;ModelProperty&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelProperty/DefaultMember.Category" xml:space="preserve">
    <value>Code Generation</value>
    <comment>Category for DomainProperty &apos;DefaultMember&apos; on DomainClass &apos;ModelProperty&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelProperty/ColumnDefault.Description" xml:space="preserve">
    <value>The default value used in database column creation.</value>
    <comment>Description for DomainProperty &apos;ColumnDefault&apos; on DomainClass &apos;ModelProperty&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelProperty/ColumnDefault.DisplayName" xml:space="preserve">
    <value>Column Default</value>
    <comment>DisplayName for DomainProperty &apos;ColumnDefault&apos; on DomainClass &apos;ModelProperty&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelProperty/ColumnDefault.Category" xml:space="preserve">
    <value>ActiveRecord</value>
    <comment>Category for DomainProperty &apos;ColumnDefault&apos; on DomainClass &apos;ModelProperty&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelElementWithAccess.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.ModelElementWithAccess</value>
    <comment>Description for DomainClass &apos;ModelElementWithAccess&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelElementWithAccess.DisplayName" xml:space="preserve">
    <value>Model Element With Access</value>
    <comment>DisplayName for DomainClass &apos;ModelElementWithAccess&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelElementWithAccess/CustomAccess.Description" xml:space="preserve">
    <value></value>
    <comment>Description for DomainProperty &apos;CustomAccess&apos; on DomainClass &apos;ModelElementWithAccess&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelElementWithAccess/CustomAccess.DisplayName" xml:space="preserve">
    <value>Custom Access</value>
    <comment>DisplayName for DomainProperty &apos;CustomAccess&apos; on DomainClass &apos;ModelElementWithAccess&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelElementWithAccess/CustomAccess.Category" xml:space="preserve">
    <value>ActiveRecord</value>
    <comment>Category for DomainProperty &apos;CustomAccess&apos; on DomainClass &apos;ModelElementWithAccess&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelElementWithAccess/Access.Description" xml:space="preserve">
    <value></value>
    <comment>Description for DomainProperty &apos;Access&apos; on DomainClass &apos;ModelElementWithAccess&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelElementWithAccess/Access.DisplayName" xml:space="preserve">
    <value>Access</value>
    <comment>DisplayName for DomainProperty &apos;Access&apos; on DomainClass &apos;ModelElementWithAccess&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelElementWithAccess/Access.Category" xml:space="preserve">
    <value>ActiveRecord</value>
    <comment>Category for DomainProperty &apos;Access&apos; on DomainClass &apos;ModelElementWithAccess&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NamedElement.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.NamedElement</value>
    <comment>Description for DomainClass &apos;NamedElement&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NamedElement.DisplayName" xml:space="preserve">
    <value>Named Element</value>
    <comment>DisplayName for DomainClass &apos;NamedElement&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NamedElement/Name.Description" xml:space="preserve">
    <value>Name of the element</value>
    <comment>Description for DomainProperty &apos;Name&apos; on DomainClass &apos;NamedElement&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NamedElement/Name.DisplayName" xml:space="preserve">
    <value>Name</value>
    <comment>DisplayName for DomainProperty &apos;Name&apos; on DomainClass &apos;NamedElement&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NamedElement/Description.Description" xml:space="preserve">
    <value>Description of the element. This will appear in a &lt;summary&gt; Xml comment.</value>
    <comment>Description for DomainProperty &apos;Description&apos; on DomainClass &apos;NamedElement&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NamedElement/Description.DisplayName" xml:space="preserve">
    <value>Description</value>
    <comment>DisplayName for DomainProperty &apos;Description&apos; on DomainClass &apos;NamedElement&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NestedClass.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.NestedClass</value>
    <comment>Description for DomainClass &apos;NestedClass&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NestedClass.DisplayName" xml:space="preserve">
    <value>Nested Class</value>
    <comment>DisplayName for DomainClass &apos;NestedClass&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NestedClass/ImplementINotifyPropertyChanged.Description" xml:space="preserve">
    <value>Instructs ActiveWriter to implement INotifyPropertyChanged interface in this class.</value>
    <comment>Description for DomainProperty &apos;ImplementINotifyPropertyChanged&apos; on DomainClass &apos;NestedClass&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NestedClass/ImplementINotifyPropertyChanged.DisplayName" xml:space="preserve">
    <value>Implement INotifyPropertyChanged</value>
    <comment>DisplayName for DomainProperty &apos;ImplementINotifyPropertyChanged&apos; on DomainClass &apos;NestedClass&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NestedClass/ImplementINotifyPropertyChanged.Category" xml:space="preserve">
    <value>Code Generation</value>
    <comment>Category for DomainProperty &apos;ImplementINotifyPropertyChanged&apos; on DomainClass &apos;NestedClass&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NestedClass/ImplementINotifyPropertyChanging.Description" xml:space="preserve">
    <value>Instructs ActiveWriter to implement INotifyPropertyChanging interface in this class.</value>
    <comment>Description for DomainProperty &apos;ImplementINotifyPropertyChanging&apos; on DomainClass &apos;NestedClass&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NestedClass/ImplementINotifyPropertyChanging.DisplayName" xml:space="preserve">
    <value>Implement INotifyPropertyChanging</value>
    <comment>DisplayName for DomainProperty &apos;ImplementINotifyPropertyChanging&apos; on DomainClass &apos;NestedClass&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NestedClass/ImplementINotifyPropertyChanging.Category" xml:space="preserve">
    <value>Code Generation</value>
    <comment>Category for DomainProperty &apos;ImplementINotifyPropertyChanging&apos; on DomainClass &apos;NestedClass&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelHasClass.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.ModelHasClass</value>
    <comment>Description for DomainClass &apos;ModelHasClass&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelHasClass.DisplayName" xml:space="preserve">
    <value>Model Has Class</value>
    <comment>DisplayName for DomainClass &apos;ModelHasClass&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelHasClass/Model.Description" xml:space="preserve">
    <value>Classes of the model</value>
    <comment>Description for DomainRole &apos;Model&apos; on DomainRelationship &apos;ModelHasClass&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelHasClass/Model.DisplayName" xml:space="preserve">
    <value>Model</value>
    <comment>DisplayName for DomainRole &apos;Model&apos; on DomainRelationship &apos;ModelHasClass&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelHasClass/Model.PropertyDisplayName" xml:space="preserve">
    <value>Classes</value>
    <comment>PropertyDisplayName for DomainRole &apos;Model&apos; on DomainRelationship &apos;ModelHasClass&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelHasClass/Class.Description" xml:space="preserve">
    <value>Model of the class</value>
    <comment>Description for DomainRole &apos;Class&apos; on DomainRelationship &apos;ModelHasClass&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelHasClass/Class.DisplayName" xml:space="preserve">
    <value>Class</value>
    <comment>DisplayName for DomainRole &apos;Class&apos; on DomainRelationship &apos;ModelHasClass&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelHasClass/Class.PropertyDisplayName" xml:space="preserve">
    <value>Model</value>
    <comment>PropertyDisplayName for DomainRole &apos;Class&apos; on DomainRelationship &apos;ModelHasClass&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation.Description" xml:space="preserve">
    <value>Maps a many to one association</value>
    <comment>Description for DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation.DisplayName" xml:space="preserve">
    <value>Many To One Relation</value>
    <comment>DisplayName for DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/TargetCache.Description" xml:space="preserve">
    <value></value>
    <comment>Description for DomainProperty &apos;TargetCache&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/TargetCache.DisplayName" xml:space="preserve">
    <value>Target Cache</value>
    <comment>DisplayName for DomainProperty &apos;TargetCache&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/TargetCache.Category" xml:space="preserve">
    <value>Target (HasMany)</value>
    <comment>Category for DomainProperty &apos;TargetCache&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/TargetCascade.Description" xml:space="preserve">
    <value></value>
    <comment>Description for DomainProperty &apos;TargetCascade&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/TargetCascade.DisplayName" xml:space="preserve">
    <value>Target Cascade</value>
    <comment>DisplayName for DomainProperty &apos;TargetCascade&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/TargetCascade.Category" xml:space="preserve">
    <value>Target (HasMany)</value>
    <comment>Category for DomainProperty &apos;TargetCascade&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/TargetColumnKey.Description" xml:space="preserve">
    <value></value>
    <comment>Description for DomainProperty &apos;TargetColumnKey&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/TargetColumnKey.DisplayName" xml:space="preserve">
    <value>Target Column Key</value>
    <comment>DisplayName for DomainProperty &apos;TargetColumnKey&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/TargetColumnKey.Category" xml:space="preserve">
    <value>Target (HasMany)</value>
    <comment>Category for DomainProperty &apos;TargetColumnKey&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/TargetCustomAccess.Description" xml:space="preserve">
    <value></value>
    <comment>Description for DomainProperty &apos;TargetCustomAccess&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/TargetCustomAccess.DisplayName" xml:space="preserve">
    <value>Target Custom Access</value>
    <comment>DisplayName for DomainProperty &apos;TargetCustomAccess&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/TargetCustomAccess.Category" xml:space="preserve">
    <value>Target (HasMany)</value>
    <comment>Category for DomainProperty &apos;TargetCustomAccess&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/TargetInverse.Description" xml:space="preserve">
    <value></value>
    <comment>Description for DomainProperty &apos;TargetInverse&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/TargetInverse.DisplayName" xml:space="preserve">
    <value>Target Inverse</value>
    <comment>DisplayName for DomainProperty &apos;TargetInverse&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/TargetInverse.Category" xml:space="preserve">
    <value>Target (HasMany)</value>
    <comment>Category for DomainProperty &apos;TargetInverse&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/TargetLazy.Description" xml:space="preserve">
    <value></value>
    <comment>Description for DomainProperty &apos;TargetLazy&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/TargetLazy.DisplayName" xml:space="preserve">
    <value>Target Lazy</value>
    <comment>DisplayName for DomainProperty &apos;TargetLazy&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/TargetLazy.Category" xml:space="preserve">
    <value>Target (HasMany)</value>
    <comment>Category for DomainProperty &apos;TargetLazy&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/TargetMapType.Description" xml:space="preserve">
    <value></value>
    <comment>Description for DomainProperty &apos;TargetMapType&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/TargetMapType.DisplayName" xml:space="preserve">
    <value>Target Map Type</value>
    <comment>DisplayName for DomainProperty &apos;TargetMapType&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/TargetMapType.Category" xml:space="preserve">
    <value>Target (HasMany)</value>
    <comment>Category for DomainProperty &apos;TargetMapType&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/TargetOrderBy.Description" xml:space="preserve">
    <value></value>
    <comment>Description for DomainProperty &apos;TargetOrderBy&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/TargetOrderBy.DisplayName" xml:space="preserve">
    <value>Target Order By</value>
    <comment>DisplayName for DomainProperty &apos;TargetOrderBy&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/TargetOrderBy.Category" xml:space="preserve">
    <value>Target (HasMany)</value>
    <comment>Category for DomainProperty &apos;TargetOrderBy&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/TargetRelationType.Description" xml:space="preserve">
    <value></value>
    <comment>Description for DomainProperty &apos;TargetRelationType&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/TargetRelationType.DisplayName" xml:space="preserve">
    <value>Target Relation Type</value>
    <comment>DisplayName for DomainProperty &apos;TargetRelationType&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/TargetRelationType.Category" xml:space="preserve">
    <value>Target (HasMany)</value>
    <comment>Category for DomainProperty &apos;TargetRelationType&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/TargetSchema.Description" xml:space="preserve">
    <value></value>
    <comment>Description for DomainProperty &apos;TargetSchema&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/TargetSchema.DisplayName" xml:space="preserve">
    <value>Target Schema</value>
    <comment>DisplayName for DomainProperty &apos;TargetSchema&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/TargetSchema.Category" xml:space="preserve">
    <value>Target (HasMany)</value>
    <comment>Category for DomainProperty &apos;TargetSchema&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/TargetSort.Description" xml:space="preserve">
    <value></value>
    <comment>Description for DomainProperty &apos;TargetSort&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/TargetSort.DisplayName" xml:space="preserve">
    <value>Target Sort</value>
    <comment>DisplayName for DomainProperty &apos;TargetSort&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/TargetSort.Category" xml:space="preserve">
    <value>Target (HasMany)</value>
    <comment>Category for DomainProperty &apos;TargetSort&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/TargetTable.Description" xml:space="preserve">
    <value></value>
    <comment>Description for DomainProperty &apos;TargetTable&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/TargetTable.DisplayName" xml:space="preserve">
    <value>Target Table</value>
    <comment>DisplayName for DomainProperty &apos;TargetTable&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/TargetTable.Category" xml:space="preserve">
    <value>Target (HasMany)</value>
    <comment>Category for DomainProperty &apos;TargetTable&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/TargetWhere.Description" xml:space="preserve">
    <value></value>
    <comment>Description for DomainProperty &apos;TargetWhere&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/TargetWhere.DisplayName" xml:space="preserve">
    <value>Target Where</value>
    <comment>DisplayName for DomainProperty &apos;TargetWhere&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/TargetWhere.Category" xml:space="preserve">
    <value>Target (HasMany)</value>
    <comment>Category for DomainProperty &apos;TargetWhere&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/TargetDescription.Description" xml:space="preserve">
    <value>Description of the property. This will appear in a &lt;summary&gt; Xml comment.</value>
    <comment>Description for DomainProperty &apos;TargetDescription&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/TargetDescription.DisplayName" xml:space="preserve">
    <value>Target Description</value>
    <comment>DisplayName for DomainProperty &apos;TargetDescription&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/TargetDescription.Category" xml:space="preserve">
    <value>Code Generation</value>
    <comment>Category for DomainProperty &apos;TargetDescription&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/TargetPropertyName.Description" xml:space="preserve">
    <value>Name of the property in the generated code. If not supplied, ActiveWriter will use the source class name in plural form.</value>
    <comment>Description for DomainProperty &apos;TargetPropertyName&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/TargetPropertyName.DisplayName" xml:space="preserve">
    <value>Target Property Name</value>
    <comment>DisplayName for DomainProperty &apos;TargetPropertyName&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/TargetPropertyName.Category" xml:space="preserve">
    <value>Code Generation</value>
    <comment>Category for DomainProperty &apos;TargetPropertyName&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/TargetPropertyType.Description" xml:space="preserve">
    <value>Type of the property. If not supplied, ActiveWriter will use the model&apos;s Collection Inteface by default.</value>
    <comment>Description for DomainProperty &apos;TargetPropertyType&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/TargetPropertyType.DisplayName" xml:space="preserve">
    <value>Target Property Type</value>
    <comment>DisplayName for DomainProperty &apos;TargetPropertyType&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/TargetPropertyType.Category" xml:space="preserve">
    <value>Code Generation</value>
    <comment>Category for DomainProperty &apos;TargetPropertyType&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/SourceCascade.Description" xml:space="preserve">
    <value></value>
    <comment>Description for DomainProperty &apos;SourceCascade&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/SourceCascade.DisplayName" xml:space="preserve">
    <value>Source Cascade</value>
    <comment>DisplayName for DomainProperty &apos;SourceCascade&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/SourceCascade.Category" xml:space="preserve">
    <value>Source (BelongsTo)</value>
    <comment>Category for DomainProperty &apos;SourceCascade&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/SourceColumn.Description" xml:space="preserve">
    <value></value>
    <comment>Description for DomainProperty &apos;SourceColumn&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/SourceColumn.DisplayName" xml:space="preserve">
    <value>Source Column</value>
    <comment>DisplayName for DomainProperty &apos;SourceColumn&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/SourceColumn.Category" xml:space="preserve">
    <value>Source (BelongsTo)</value>
    <comment>Category for DomainProperty &apos;SourceColumn&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/SourceCustomAccess.Description" xml:space="preserve">
    <value></value>
    <comment>Description for DomainProperty &apos;SourceCustomAccess&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/SourceCustomAccess.DisplayName" xml:space="preserve">
    <value>Source Custom Access</value>
    <comment>DisplayName for DomainProperty &apos;SourceCustomAccess&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/SourceCustomAccess.Category" xml:space="preserve">
    <value>Source (BelongsTo)</value>
    <comment>Category for DomainProperty &apos;SourceCustomAccess&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/SourceInsert.Description" xml:space="preserve">
    <value></value>
    <comment>Description for DomainProperty &apos;SourceInsert&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/SourceInsert.DisplayName" xml:space="preserve">
    <value>Source Insert</value>
    <comment>DisplayName for DomainProperty &apos;SourceInsert&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/SourceInsert.Category" xml:space="preserve">
    <value>Source (BelongsTo)</value>
    <comment>Category for DomainProperty &apos;SourceInsert&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/SourceNotNull.Description" xml:space="preserve">
    <value></value>
    <comment>Description for DomainProperty &apos;SourceNotNull&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/SourceNotNull.DisplayName" xml:space="preserve">
    <value>Source Not Null</value>
    <comment>DisplayName for DomainProperty &apos;SourceNotNull&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/SourceNotNull.Category" xml:space="preserve">
    <value>Source (BelongsTo)</value>
    <comment>Category for DomainProperty &apos;SourceNotNull&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/SourceOuterJoin.Description" xml:space="preserve">
    <value></value>
    <comment>Description for DomainProperty &apos;SourceOuterJoin&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/SourceOuterJoin.DisplayName" xml:space="preserve">
    <value>Source Outer Join</value>
    <comment>DisplayName for DomainProperty &apos;SourceOuterJoin&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/SourceOuterJoin.Category" xml:space="preserve">
    <value>Source (BelongsTo)</value>
    <comment>Category for DomainProperty &apos;SourceOuterJoin&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/SourceType.Description" xml:space="preserve">
    <value></value>
    <comment>Description for DomainProperty &apos;SourceType&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/SourceType.DisplayName" xml:space="preserve">
    <value>Source Type</value>
    <comment>DisplayName for DomainProperty &apos;SourceType&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/SourceType.Category" xml:space="preserve">
    <value>Source (BelongsTo)</value>
    <comment>Category for DomainProperty &apos;SourceType&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/SourceUnique.Description" xml:space="preserve">
    <value></value>
    <comment>Description for DomainProperty &apos;SourceUnique&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/SourceUnique.DisplayName" xml:space="preserve">
    <value>Source Unique</value>
    <comment>DisplayName for DomainProperty &apos;SourceUnique&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/SourceUnique.Category" xml:space="preserve">
    <value>Source (BelongsTo)</value>
    <comment>Category for DomainProperty &apos;SourceUnique&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/SourceUpdate.Description" xml:space="preserve">
    <value></value>
    <comment>Description for DomainProperty &apos;SourceUpdate&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/SourceUpdate.DisplayName" xml:space="preserve">
    <value>Source Update</value>
    <comment>DisplayName for DomainProperty &apos;SourceUpdate&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/SourceUpdate.Category" xml:space="preserve">
    <value>Source (BelongsTo)</value>
    <comment>Category for DomainProperty &apos;SourceUpdate&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/SourceDescription.Description" xml:space="preserve">
    <value>Description of the property. This will appear in a &lt;summary&gt; Xml comment.</value>
    <comment>Description for DomainProperty &apos;SourceDescription&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/SourceDescription.DisplayName" xml:space="preserve">
    <value>Source Description</value>
    <comment>DisplayName for DomainProperty &apos;SourceDescription&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/SourceDescription.Category" xml:space="preserve">
    <value>Code Generation</value>
    <comment>Category for DomainProperty &apos;SourceDescription&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/TargetAccess.Description" xml:space="preserve">
    <value>The access strategy.</value>
    <comment>Description for DomainProperty &apos;TargetAccess&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/TargetAccess.DisplayName" xml:space="preserve">
    <value>Target Access</value>
    <comment>DisplayName for DomainProperty &apos;TargetAccess&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/TargetAccess.Category" xml:space="preserve">
    <value>Target (HasMany)</value>
    <comment>Category for DomainProperty &apos;TargetAccess&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/SourcePropertyName.Description" xml:space="preserve">
    <value>Name of the property. If not suplied, ActiveWriter will use target class name.</value>
    <comment>Description for DomainProperty &apos;SourcePropertyName&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/SourcePropertyName.DisplayName" xml:space="preserve">
    <value>Source Property Name</value>
    <comment>DisplayName for DomainProperty &apos;SourcePropertyName&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/SourcePropertyName.Category" xml:space="preserve">
    <value>Code Generation</value>
    <comment>Category for DomainProperty &apos;SourcePropertyName&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/SourceNotFoundBehaviour.Description" xml:space="preserve">
    <value>Gets or sets the way broken relations are handled.</value>
    <comment>Description for DomainProperty &apos;SourceNotFoundBehaviour&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/SourceNotFoundBehaviour.DisplayName" xml:space="preserve">
    <value>Source Not Found Behaviour</value>
    <comment>DisplayName for DomainProperty &apos;SourceNotFoundBehaviour&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/SourceNotFoundBehaviour.Category" xml:space="preserve">
    <value>Source (BelongsTo)</value>
    <comment>Category for DomainProperty &apos;SourceNotFoundBehaviour&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/TargetNotFoundBehaviour.Description" xml:space="preserve">
    <value>Gets or sets the way broken relations are handled.</value>
    <comment>Description for DomainProperty &apos;TargetNotFoundBehaviour&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/TargetNotFoundBehaviour.DisplayName" xml:space="preserve">
    <value>Target Not Found Behaviour</value>
    <comment>DisplayName for DomainProperty &apos;TargetNotFoundBehaviour&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/TargetNotFoundBehaviour.Category" xml:space="preserve">
    <value>Target (HasMany)</value>
    <comment>Category for DomainProperty &apos;TargetNotFoundBehaviour&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/TargetElement.Description" xml:space="preserve">
    <value>Use for simple types.</value>
    <comment>Description for DomainProperty &apos;TargetElement&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/TargetElement.DisplayName" xml:space="preserve">
    <value>Target Element</value>
    <comment>DisplayName for DomainProperty &apos;TargetElement&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/TargetElement.Category" xml:space="preserve">
    <value>Target (HasMany)</value>
    <comment>Category for DomainProperty &apos;TargetElement&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/TargetIndexType.Description" xml:space="preserve">
    <value>Only used with maps.</value>
    <comment>Description for DomainProperty &apos;TargetIndexType&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/TargetIndexType.DisplayName" xml:space="preserve">
    <value>Target Index Type</value>
    <comment>DisplayName for DomainProperty &apos;TargetIndexType&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/TargetIndexType.Category" xml:space="preserve">
    <value>Target (HasMany)</value>
    <comment>Category for DomainProperty &apos;TargetIndexType&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/TargetIndex.Description" xml:space="preserve">
    <value>Only used with maps or list.</value>
    <comment>Description for DomainProperty &apos;TargetIndex&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/TargetIndex.DisplayName" xml:space="preserve">
    <value>Target Index</value>
    <comment>DisplayName for DomainProperty &apos;TargetIndex&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/TargetIndex.Category" xml:space="preserve">
    <value>Target (HasMany)</value>
    <comment>Category for DomainProperty &apos;TargetIndex&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/TargetFetch.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.ManyToOneRelation.Target Fetch</value>
    <comment>Description for DomainProperty &apos;TargetFetch&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/TargetFetch.DisplayName" xml:space="preserve">
    <value>Target Fetch</value>
    <comment>DisplayName for DomainProperty &apos;TargetFetch&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/TargetIUserCollectionType.Description" xml:space="preserve">
    <value>User collection type for many side of relationship</value>
    <comment>Description for DomainProperty &apos;TargetIUserCollectionType&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/TargetIUserCollectionType.DisplayName" xml:space="preserve">
    <value>Target IUserCollectionType</value>
    <comment>DisplayName for DomainProperty &apos;TargetIUserCollectionType&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/TargetIUserCollectionType.Category" xml:space="preserve">
    <value>Target (HasMany)</value>
    <comment>Category for DomainProperty &apos;TargetIUserCollectionType&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/TargetPropertyGenerated.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.ManyToOneRelation.Target Property Generated</value>
    <comment>Description for DomainProperty &apos;TargetPropertyGenerated&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/TargetPropertyGenerated.DisplayName" xml:space="preserve">
    <value>Target Property Generated</value>
    <comment>DisplayName for DomainProperty &apos;TargetPropertyGenerated&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/TargetPropertyGenerated.Category" xml:space="preserve">
    <value>Target (HasMany)</value>
    <comment>Category for DomainProperty &apos;TargetPropertyGenerated&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/SourcePropertyGenerated.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.ManyToOneRelation.Source Property Generated</value>
    <comment>Description for DomainProperty &apos;SourcePropertyGenerated&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/SourcePropertyGenerated.DisplayName" xml:space="preserve">
    <value>Source Property Generated</value>
    <comment>DisplayName for DomainProperty &apos;SourcePropertyGenerated&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/SourcePropertyGenerated.Category" xml:space="preserve">
    <value>Source (BelongsTo)</value>
    <comment>Category for DomainProperty &apos;SourcePropertyGenerated&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/SourceAccess.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.ManyToOneRelation.Source Access</value>
    <comment>Description for DomainProperty &apos;SourceAccess&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/SourceAccess.DisplayName" xml:space="preserve">
    <value>Source Access</value>
    <comment>DisplayName for DomainProperty &apos;SourceAccess&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/SourceAccess.Category" xml:space="preserve">
    <value>Source (BelongsTo)</value>
    <comment>Category for DomainProperty &apos;SourceAccess&apos; on DomainClass &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/Source.Description" xml:space="preserve">
    <value></value>
    <comment>Description for DomainRole &apos;Source&apos; on DomainRelationship &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/Source.DisplayName" xml:space="preserve">
    <value>Source</value>
    <comment>DisplayName for DomainRole &apos;Source&apos; on DomainRelationship &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/Source.PropertyDisplayName" xml:space="preserve">
    <value>Targets</value>
    <comment>PropertyDisplayName for DomainRole &apos;Source&apos; on DomainRelationship &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/Target.Description" xml:space="preserve">
    <value></value>
    <comment>Description for DomainRole &apos;Target&apos; on DomainRelationship &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/Target.DisplayName" xml:space="preserve">
    <value>Target</value>
    <comment>DisplayName for DomainRole &apos;Target&apos; on DomainRelationship &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneRelation/Target.PropertyDisplayName" xml:space="preserve">
    <value>Sources</value>
    <comment>PropertyDisplayName for DomainRole &apos;Target&apos; on DomainRelationship &apos;ManyToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ClassHasProperty.Description" xml:space="preserve">
    <value></value>
    <comment>Description for DomainClass &apos;ClassHasProperty&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ClassHasProperty.DisplayName" xml:space="preserve">
    <value>Class Has Property</value>
    <comment>DisplayName for DomainClass &apos;ClassHasProperty&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ClassHasProperty/ModelClass.Description" xml:space="preserve">
    <value></value>
    <comment>Description for DomainRole &apos;ModelClass&apos; on DomainRelationship &apos;ClassHasProperty&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ClassHasProperty/ModelClass.DisplayName" xml:space="preserve">
    <value>Model Class</value>
    <comment>DisplayName for DomainRole &apos;ModelClass&apos; on DomainRelationship &apos;ClassHasProperty&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ClassHasProperty/ModelClass.PropertyDisplayName" xml:space="preserve">
    <value>Properties</value>
    <comment>PropertyDisplayName for DomainRole &apos;ModelClass&apos; on DomainRelationship &apos;ClassHasProperty&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ClassHasProperty/Property.Description" xml:space="preserve">
    <value></value>
    <comment>Description for DomainRole &apos;Property&apos; on DomainRelationship &apos;ClassHasProperty&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ClassHasProperty/Property.DisplayName" xml:space="preserve">
    <value>Property</value>
    <comment>DisplayName for DomainRole &apos;Property&apos; on DomainRelationship &apos;ClassHasProperty&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ClassHasProperty/Property.PropertyDisplayName" xml:space="preserve">
    <value>Model Class</value>
    <comment>PropertyDisplayName for DomainRole &apos;Property&apos; on DomainRelationship &apos;ClassHasProperty&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation.Description" xml:space="preserve">
    <value>Maps a many to many association with an association table</value>
    <comment>Description for DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation.DisplayName" xml:space="preserve">
    <value>Many To Many Relation</value>
    <comment>DisplayName for DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/SourceCache.Description" xml:space="preserve">
    <value></value>
    <comment>Description for DomainProperty &apos;SourceCache&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/SourceCache.DisplayName" xml:space="preserve">
    <value>Source Cache</value>
    <comment>DisplayName for DomainProperty &apos;SourceCache&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/SourceCache.Category" xml:space="preserve">
    <value>Source</value>
    <comment>Category for DomainProperty &apos;SourceCache&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/SourceCascade.Description" xml:space="preserve">
    <value></value>
    <comment>Description for DomainProperty &apos;SourceCascade&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/SourceCascade.DisplayName" xml:space="preserve">
    <value>Source Cascade</value>
    <comment>DisplayName for DomainProperty &apos;SourceCascade&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/SourceCascade.Category" xml:space="preserve">
    <value>Source</value>
    <comment>Category for DomainProperty &apos;SourceCascade&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/SourceColumn.Description" xml:space="preserve">
    <value></value>
    <comment>Description for DomainProperty &apos;SourceColumn&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/SourceColumn.DisplayName" xml:space="preserve">
    <value>Source Column</value>
    <comment>DisplayName for DomainProperty &apos;SourceColumn&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/SourceColumn.Category" xml:space="preserve">
    <value>Common</value>
    <comment>Category for DomainProperty &apos;SourceColumn&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/SourceCustomAccess.Description" xml:space="preserve">
    <value></value>
    <comment>Description for DomainProperty &apos;SourceCustomAccess&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/SourceCustomAccess.DisplayName" xml:space="preserve">
    <value>Source Custom Access</value>
    <comment>DisplayName for DomainProperty &apos;SourceCustomAccess&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/SourceCustomAccess.Category" xml:space="preserve">
    <value>Source</value>
    <comment>Category for DomainProperty &apos;SourceCustomAccess&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/SourceInverse.Description" xml:space="preserve">
    <value></value>
    <comment>Description for DomainProperty &apos;SourceInverse&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/SourceInverse.DisplayName" xml:space="preserve">
    <value>Source Inverse</value>
    <comment>DisplayName for DomainProperty &apos;SourceInverse&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/SourceInverse.Category" xml:space="preserve">
    <value>Source</value>
    <comment>Category for DomainProperty &apos;SourceInverse&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/SourceLazy.Description" xml:space="preserve">
    <value></value>
    <comment>Description for DomainProperty &apos;SourceLazy&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/SourceLazy.DisplayName" xml:space="preserve">
    <value>Source Lazy</value>
    <comment>DisplayName for DomainProperty &apos;SourceLazy&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/SourceLazy.Category" xml:space="preserve">
    <value>Source</value>
    <comment>Category for DomainProperty &apos;SourceLazy&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/SourceMapType.Description" xml:space="preserve">
    <value></value>
    <comment>Description for DomainProperty &apos;SourceMapType&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/SourceMapType.DisplayName" xml:space="preserve">
    <value>Source Map Type</value>
    <comment>DisplayName for DomainProperty &apos;SourceMapType&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/SourceMapType.Category" xml:space="preserve">
    <value>Source</value>
    <comment>Category for DomainProperty &apos;SourceMapType&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/SourceOrderBy.Description" xml:space="preserve">
    <value></value>
    <comment>Description for DomainProperty &apos;SourceOrderBy&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/SourceOrderBy.DisplayName" xml:space="preserve">
    <value>Source Order By</value>
    <comment>DisplayName for DomainProperty &apos;SourceOrderBy&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/SourceOrderBy.Category" xml:space="preserve">
    <value>Source</value>
    <comment>Category for DomainProperty &apos;SourceOrderBy&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/SourceRelationType.Description" xml:space="preserve">
    <value></value>
    <comment>Description for DomainProperty &apos;SourceRelationType&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/SourceRelationType.DisplayName" xml:space="preserve">
    <value>Source Relation Type</value>
    <comment>DisplayName for DomainProperty &apos;SourceRelationType&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/SourceRelationType.Category" xml:space="preserve">
    <value>Source</value>
    <comment>Category for DomainProperty &apos;SourceRelationType&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/Schema.Description" xml:space="preserve">
    <value></value>
    <comment>Description for DomainProperty &apos;Schema&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/Schema.DisplayName" xml:space="preserve">
    <value>Schema</value>
    <comment>DisplayName for DomainProperty &apos;Schema&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/Schema.Category" xml:space="preserve">
    <value>Common</value>
    <comment>Category for DomainProperty &apos;Schema&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/SourceSort.Description" xml:space="preserve">
    <value></value>
    <comment>Description for DomainProperty &apos;SourceSort&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/SourceSort.DisplayName" xml:space="preserve">
    <value>Source Sort</value>
    <comment>DisplayName for DomainProperty &apos;SourceSort&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/SourceSort.Category" xml:space="preserve">
    <value>Source</value>
    <comment>Category for DomainProperty &apos;SourceSort&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/Table.Description" xml:space="preserve">
    <value></value>
    <comment>Description for DomainProperty &apos;Table&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/Table.DisplayName" xml:space="preserve">
    <value>Table</value>
    <comment>DisplayName for DomainProperty &apos;Table&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/Table.Category" xml:space="preserve">
    <value>Common</value>
    <comment>Category for DomainProperty &apos;Table&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/SourceWhere.Description" xml:space="preserve">
    <value></value>
    <comment>Description for DomainProperty &apos;SourceWhere&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/SourceWhere.DisplayName" xml:space="preserve">
    <value>Source Where</value>
    <comment>DisplayName for DomainProperty &apos;SourceWhere&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/SourceWhere.Category" xml:space="preserve">
    <value>Source</value>
    <comment>Category for DomainProperty &apos;SourceWhere&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/TargetCache.Description" xml:space="preserve">
    <value></value>
    <comment>Description for DomainProperty &apos;TargetCache&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/TargetCache.DisplayName" xml:space="preserve">
    <value>Target Cache</value>
    <comment>DisplayName for DomainProperty &apos;TargetCache&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/TargetCache.Category" xml:space="preserve">
    <value>Target</value>
    <comment>Category for DomainProperty &apos;TargetCache&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/TargetCascade.Description" xml:space="preserve">
    <value></value>
    <comment>Description for DomainProperty &apos;TargetCascade&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/TargetCascade.DisplayName" xml:space="preserve">
    <value>Target Cascade</value>
    <comment>DisplayName for DomainProperty &apos;TargetCascade&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/TargetCascade.Category" xml:space="preserve">
    <value>Target</value>
    <comment>Category for DomainProperty &apos;TargetCascade&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/TargetColumn.Description" xml:space="preserve">
    <value></value>
    <comment>Description for DomainProperty &apos;TargetColumn&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/TargetColumn.DisplayName" xml:space="preserve">
    <value>Target Column</value>
    <comment>DisplayName for DomainProperty &apos;TargetColumn&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/TargetColumn.Category" xml:space="preserve">
    <value>Common</value>
    <comment>Category for DomainProperty &apos;TargetColumn&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/TargetCustomAccess.Description" xml:space="preserve">
    <value></value>
    <comment>Description for DomainProperty &apos;TargetCustomAccess&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/TargetCustomAccess.DisplayName" xml:space="preserve">
    <value>Target Custom Access</value>
    <comment>DisplayName for DomainProperty &apos;TargetCustomAccess&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/TargetCustomAccess.Category" xml:space="preserve">
    <value>Target</value>
    <comment>Category for DomainProperty &apos;TargetCustomAccess&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/TargetInverse.Description" xml:space="preserve">
    <value></value>
    <comment>Description for DomainProperty &apos;TargetInverse&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/TargetInverse.DisplayName" xml:space="preserve">
    <value>Target Inverse</value>
    <comment>DisplayName for DomainProperty &apos;TargetInverse&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/TargetInverse.Category" xml:space="preserve">
    <value>Target</value>
    <comment>Category for DomainProperty &apos;TargetInverse&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/TargetLazy.Description" xml:space="preserve">
    <value></value>
    <comment>Description for DomainProperty &apos;TargetLazy&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/TargetLazy.DisplayName" xml:space="preserve">
    <value>Target Lazy</value>
    <comment>DisplayName for DomainProperty &apos;TargetLazy&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/TargetLazy.Category" xml:space="preserve">
    <value>Target</value>
    <comment>Category for DomainProperty &apos;TargetLazy&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/TargetMapType.Description" xml:space="preserve">
    <value></value>
    <comment>Description for DomainProperty &apos;TargetMapType&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/TargetMapType.DisplayName" xml:space="preserve">
    <value>Target Map Type</value>
    <comment>DisplayName for DomainProperty &apos;TargetMapType&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/TargetMapType.Category" xml:space="preserve">
    <value>Target</value>
    <comment>Category for DomainProperty &apos;TargetMapType&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/TargetOrderBy.Description" xml:space="preserve">
    <value></value>
    <comment>Description for DomainProperty &apos;TargetOrderBy&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/TargetOrderBy.DisplayName" xml:space="preserve">
    <value>Target Order By</value>
    <comment>DisplayName for DomainProperty &apos;TargetOrderBy&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/TargetOrderBy.Category" xml:space="preserve">
    <value>Target</value>
    <comment>Category for DomainProperty &apos;TargetOrderBy&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/TargetRelationType.Description" xml:space="preserve">
    <value></value>
    <comment>Description for DomainProperty &apos;TargetRelationType&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/TargetRelationType.DisplayName" xml:space="preserve">
    <value>Target Relation Type</value>
    <comment>DisplayName for DomainProperty &apos;TargetRelationType&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/TargetRelationType.Category" xml:space="preserve">
    <value>Target</value>
    <comment>Category for DomainProperty &apos;TargetRelationType&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/TargetSort.Description" xml:space="preserve">
    <value></value>
    <comment>Description for DomainProperty &apos;TargetSort&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/TargetSort.DisplayName" xml:space="preserve">
    <value>Target Sort</value>
    <comment>DisplayName for DomainProperty &apos;TargetSort&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/TargetSort.Category" xml:space="preserve">
    <value>Target</value>
    <comment>Category for DomainProperty &apos;TargetSort&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/TargetWhere.Description" xml:space="preserve">
    <value></value>
    <comment>Description for DomainProperty &apos;TargetWhere&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/TargetWhere.DisplayName" xml:space="preserve">
    <value>Target Where</value>
    <comment>DisplayName for DomainProperty &apos;TargetWhere&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/TargetWhere.Category" xml:space="preserve">
    <value>Target</value>
    <comment>Category for DomainProperty &apos;TargetWhere&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/SourceDescription.Description" xml:space="preserve">
    <value>Description of the property. This will appear in a &lt;summary&gt; Xml comment.</value>
    <comment>Description for DomainProperty &apos;SourceDescription&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/SourceDescription.DisplayName" xml:space="preserve">
    <value>Source Description</value>
    <comment>DisplayName for DomainProperty &apos;SourceDescription&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/SourceDescription.Category" xml:space="preserve">
    <value>Code Generation</value>
    <comment>Category for DomainProperty &apos;SourceDescription&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/TargetDescription.Description" xml:space="preserve">
    <value>Description of the property. This will appear in a &lt;summary&gt; Xml comment.</value>
    <comment>Description for DomainProperty &apos;TargetDescription&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/TargetDescription.DisplayName" xml:space="preserve">
    <value>Target Description</value>
    <comment>DisplayName for DomainProperty &apos;TargetDescription&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/TargetDescription.Category" xml:space="preserve">
    <value>Code Generation</value>
    <comment>Category for DomainProperty &apos;TargetDescription&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/SourceAccess.Description" xml:space="preserve">
    <value></value>
    <comment>Description for DomainProperty &apos;SourceAccess&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/SourceAccess.DisplayName" xml:space="preserve">
    <value>Source Access</value>
    <comment>DisplayName for DomainProperty &apos;SourceAccess&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/SourceAccess.Category" xml:space="preserve">
    <value>Source</value>
    <comment>Category for DomainProperty &apos;SourceAccess&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/TargetAccess.Description" xml:space="preserve">
    <value></value>
    <comment>Description for DomainProperty &apos;TargetAccess&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/TargetAccess.DisplayName" xml:space="preserve">
    <value>Target Access</value>
    <comment>DisplayName for DomainProperty &apos;TargetAccess&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/TargetAccess.Category" xml:space="preserve">
    <value>Target</value>
    <comment>Category for DomainProperty &apos;TargetAccess&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/SourcePropertyType.Description" xml:space="preserve">
    <value>Type of the property. If not supplied, ActiveWriter will use the model&apos;s Collection Interface by default.</value>
    <comment>Description for DomainProperty &apos;SourcePropertyType&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/SourcePropertyType.DisplayName" xml:space="preserve">
    <value>Source Property Type</value>
    <comment>DisplayName for DomainProperty &apos;SourcePropertyType&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/SourcePropertyType.Category" xml:space="preserve">
    <value>Code Generation</value>
    <comment>Category for DomainProperty &apos;SourcePropertyType&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/TargetPropertyType.Description" xml:space="preserve">
    <value>Type of the property. If not supplied, ActiveWriter will use the model&apos;s Collection Inteface by default.</value>
    <comment>Description for DomainProperty &apos;TargetPropertyType&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/TargetPropertyType.DisplayName" xml:space="preserve">
    <value>Target Property Type</value>
    <comment>DisplayName for DomainProperty &apos;TargetPropertyType&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/TargetPropertyType.Category" xml:space="preserve">
    <value>Code Generation</value>
    <comment>Category for DomainProperty &apos;TargetPropertyType&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/SourcePropertyName.Description" xml:space="preserve">
    <value>Name of the property in the generated code. If not supplied, ActiveWriter will use the target class name in plural form.</value>
    <comment>Description for DomainProperty &apos;SourcePropertyName&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/SourcePropertyName.DisplayName" xml:space="preserve">
    <value>Source Property Name</value>
    <comment>DisplayName for DomainProperty &apos;SourcePropertyName&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/SourcePropertyName.Category" xml:space="preserve">
    <value>Code Generation</value>
    <comment>Category for DomainProperty &apos;SourcePropertyName&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/TargetPropertyName.Description" xml:space="preserve">
    <value>Name of the property in the generated code. If not supplied, ActiveWriter will use the source class name in plural form.</value>
    <comment>Description for DomainProperty &apos;TargetPropertyName&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/TargetPropertyName.DisplayName" xml:space="preserve">
    <value>Target Property Name</value>
    <comment>DisplayName for DomainProperty &apos;TargetPropertyName&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/TargetPropertyName.Category" xml:space="preserve">
    <value>Code Generation</value>
    <comment>Category for DomainProperty &apos;TargetPropertyName&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/TargetNotFoundBehaviour.Description" xml:space="preserve">
    <value>Gets or sets the way broken relations are handled.</value>
    <comment>Description for DomainProperty &apos;TargetNotFoundBehaviour&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/TargetNotFoundBehaviour.DisplayName" xml:space="preserve">
    <value>Target Not Found Behaviour</value>
    <comment>DisplayName for DomainProperty &apos;TargetNotFoundBehaviour&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/TargetNotFoundBehaviour.Category" xml:space="preserve">
    <value>Target</value>
    <comment>Category for DomainProperty &apos;TargetNotFoundBehaviour&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/SourceNotFoundBehaviour.Description" xml:space="preserve">
    <value>Gets or sets the way broken relations are handled.</value>
    <comment>Description for DomainProperty &apos;SourceNotFoundBehaviour&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/SourceNotFoundBehaviour.DisplayName" xml:space="preserve">
    <value>Source Not Found Behaviour</value>
    <comment>DisplayName for DomainProperty &apos;SourceNotFoundBehaviour&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/SourceNotFoundBehaviour.Category" xml:space="preserve">
    <value>Source</value>
    <comment>Category for DomainProperty &apos;SourceNotFoundBehaviour&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/SourceIUserCollectionType.Description" xml:space="preserve">
    <value>User collection type</value>
    <comment>Description for DomainProperty &apos;SourceIUserCollectionType&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/SourceIUserCollectionType.DisplayName" xml:space="preserve">
    <value>Source IUserCollectionType</value>
    <comment>DisplayName for DomainProperty &apos;SourceIUserCollectionType&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/SourceIUserCollectionType.Category" xml:space="preserve">
    <value>Source</value>
    <comment>Category for DomainProperty &apos;SourceIUserCollectionType&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/TargetIUserCollectionType.Description" xml:space="preserve">
    <value>User collection type</value>
    <comment>Description for DomainProperty &apos;TargetIUserCollectionType&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/TargetIUserCollectionType.DisplayName" xml:space="preserve">
    <value>Target IUserCollectionType</value>
    <comment>DisplayName for DomainProperty &apos;TargetIUserCollectionType&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/TargetIUserCollectionType.Category" xml:space="preserve">
    <value>Target</value>
    <comment>Category for DomainProperty &apos;TargetIUserCollectionType&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/CollectionIDColumn.Description" xml:space="preserve">
    <value>The column name used for the primary key of the many to many link table.</value>
    <comment>Description for DomainProperty &apos;CollectionIDColumn&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/CollectionIDColumn.DisplayName" xml:space="preserve">
    <value>Collection IDColumn</value>
    <comment>DisplayName for DomainProperty &apos;CollectionIDColumn&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/CollectionIDColumnType.Description" xml:space="preserve">
    <value>The type of the column used for the primary key.</value>
    <comment>Description for DomainProperty &apos;CollectionIDColumnType&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/CollectionIDColumnType.DisplayName" xml:space="preserve">
    <value>Collection IDColumn Type</value>
    <comment>DisplayName for DomainProperty &apos;CollectionIDColumnType&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/CollectionIDColumnType.Category" xml:space="preserve">
    <value>Code Generation</value>
    <comment>Category for DomainProperty &apos;CollectionIDColumnType&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/CollectionIDGenerator.Description" xml:space="preserve">
    <value>The generator type for the primary key of the many to many link table.</value>
    <comment>Description for DomainProperty &apos;CollectionIDGenerator&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/CollectionIDGenerator.DisplayName" xml:space="preserve">
    <value>Collection IDGenerator</value>
    <comment>DisplayName for DomainProperty &apos;CollectionIDGenerator&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/CollectionIDGenerator.Category" xml:space="preserve">
    <value>Code Generation</value>
    <comment>Category for DomainProperty &apos;CollectionIDGenerator&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/TargetPropertyGenerated.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.ManyToManyRelation.Target Property Generated</value>
    <comment>Description for DomainProperty &apos;TargetPropertyGenerated&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/TargetPropertyGenerated.DisplayName" xml:space="preserve">
    <value>Target Property Generated</value>
    <comment>DisplayName for DomainProperty &apos;TargetPropertyGenerated&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/TargetPropertyGenerated.Category" xml:space="preserve">
    <value>Target</value>
    <comment>Category for DomainProperty &apos;TargetPropertyGenerated&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/SourcePropertyGenerated.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.ManyToManyRelation.Source Property Generated</value>
    <comment>Description for DomainProperty &apos;SourcePropertyGenerated&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/SourcePropertyGenerated.DisplayName" xml:space="preserve">
    <value>Source Property Generated</value>
    <comment>DisplayName for DomainProperty &apos;SourcePropertyGenerated&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/SourcePropertyGenerated.Category" xml:space="preserve">
    <value>Source</value>
    <comment>Category for DomainProperty &apos;SourcePropertyGenerated&apos; on DomainClass &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/Source.Description" xml:space="preserve">
    <value></value>
    <comment>Description for DomainRole &apos;Source&apos; on DomainRelationship &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/Source.DisplayName" xml:space="preserve">
    <value>Source</value>
    <comment>DisplayName for DomainRole &apos;Source&apos; on DomainRelationship &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/Source.PropertyDisplayName" xml:space="preserve">
    <value>Many To Many Targets</value>
    <comment>PropertyDisplayName for DomainRole &apos;Source&apos; on DomainRelationship &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/Target.Description" xml:space="preserve">
    <value></value>
    <comment>Description for DomainRole &apos;Target&apos; on DomainRelationship &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/Target.DisplayName" xml:space="preserve">
    <value>Target</value>
    <comment>DisplayName for DomainRole &apos;Target&apos; on DomainRelationship &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyRelation/Target.PropertyDisplayName" xml:space="preserve">
    <value>Many To Many Sources</value>
    <comment>PropertyDisplayName for DomainRole &apos;Target&apos; on DomainRelationship &apos;ManyToManyRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.OneToOneRelation.Description" xml:space="preserve">
    <value>Associates a foreign table where the current class and the target class share their primary key.</value>
    <comment>Description for DomainClass &apos;OneToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.OneToOneRelation.DisplayName" xml:space="preserve">
    <value>One To One Relation</value>
    <comment>DisplayName for DomainClass &apos;OneToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.OneToOneRelation/SourceAccess.Description" xml:space="preserve">
    <value></value>
    <comment>Description for DomainProperty &apos;SourceAccess&apos; on DomainClass &apos;OneToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.OneToOneRelation/SourceAccess.DisplayName" xml:space="preserve">
    <value>Source Access</value>
    <comment>DisplayName for DomainProperty &apos;SourceAccess&apos; on DomainClass &apos;OneToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.OneToOneRelation/SourceAccess.Category" xml:space="preserve">
    <value>Source</value>
    <comment>Category for DomainProperty &apos;SourceAccess&apos; on DomainClass &apos;OneToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.OneToOneRelation/SourceCascade.Description" xml:space="preserve">
    <value></value>
    <comment>Description for DomainProperty &apos;SourceCascade&apos; on DomainClass &apos;OneToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.OneToOneRelation/SourceCascade.DisplayName" xml:space="preserve">
    <value>Source Cascade</value>
    <comment>DisplayName for DomainProperty &apos;SourceCascade&apos; on DomainClass &apos;OneToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.OneToOneRelation/SourceCascade.Category" xml:space="preserve">
    <value>Source</value>
    <comment>Category for DomainProperty &apos;SourceCascade&apos; on DomainClass &apos;OneToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.OneToOneRelation/SourceConstrained.Description" xml:space="preserve">
    <value></value>
    <comment>Description for DomainProperty &apos;SourceConstrained&apos; on DomainClass &apos;OneToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.OneToOneRelation/SourceConstrained.DisplayName" xml:space="preserve">
    <value>Source Constrained</value>
    <comment>DisplayName for DomainProperty &apos;SourceConstrained&apos; on DomainClass &apos;OneToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.OneToOneRelation/SourceConstrained.Category" xml:space="preserve">
    <value>Source</value>
    <comment>Category for DomainProperty &apos;SourceConstrained&apos; on DomainClass &apos;OneToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.OneToOneRelation/SourceCustomAccess.Description" xml:space="preserve">
    <value></value>
    <comment>Description for DomainProperty &apos;SourceCustomAccess&apos; on DomainClass &apos;OneToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.OneToOneRelation/SourceCustomAccess.DisplayName" xml:space="preserve">
    <value>Source Custom Access</value>
    <comment>DisplayName for DomainProperty &apos;SourceCustomAccess&apos; on DomainClass &apos;OneToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.OneToOneRelation/SourceCustomAccess.Category" xml:space="preserve">
    <value>Source</value>
    <comment>Category for DomainProperty &apos;SourceCustomAccess&apos; on DomainClass &apos;OneToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.OneToOneRelation/SourceOuterJoin.Description" xml:space="preserve">
    <value></value>
    <comment>Description for DomainProperty &apos;SourceOuterJoin&apos; on DomainClass &apos;OneToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.OneToOneRelation/SourceOuterJoin.DisplayName" xml:space="preserve">
    <value>Source Outer Join</value>
    <comment>DisplayName for DomainProperty &apos;SourceOuterJoin&apos; on DomainClass &apos;OneToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.OneToOneRelation/SourceOuterJoin.Category" xml:space="preserve">
    <value>Source</value>
    <comment>Category for DomainProperty &apos;SourceOuterJoin&apos; on DomainClass &apos;OneToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.OneToOneRelation/TargetAccess.Description" xml:space="preserve">
    <value></value>
    <comment>Description for DomainProperty &apos;TargetAccess&apos; on DomainClass &apos;OneToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.OneToOneRelation/TargetAccess.DisplayName" xml:space="preserve">
    <value>Target Access</value>
    <comment>DisplayName for DomainProperty &apos;TargetAccess&apos; on DomainClass &apos;OneToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.OneToOneRelation/TargetAccess.Category" xml:space="preserve">
    <value>Target</value>
    <comment>Category for DomainProperty &apos;TargetAccess&apos; on DomainClass &apos;OneToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.OneToOneRelation/TargetCascade.Description" xml:space="preserve">
    <value></value>
    <comment>Description for DomainProperty &apos;TargetCascade&apos; on DomainClass &apos;OneToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.OneToOneRelation/TargetCascade.DisplayName" xml:space="preserve">
    <value>Target Cascade</value>
    <comment>DisplayName for DomainProperty &apos;TargetCascade&apos; on DomainClass &apos;OneToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.OneToOneRelation/TargetCascade.Category" xml:space="preserve">
    <value>Target</value>
    <comment>Category for DomainProperty &apos;TargetCascade&apos; on DomainClass &apos;OneToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.OneToOneRelation/TargetConstrained.Description" xml:space="preserve">
    <value></value>
    <comment>Description for DomainProperty &apos;TargetConstrained&apos; on DomainClass &apos;OneToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.OneToOneRelation/TargetConstrained.DisplayName" xml:space="preserve">
    <value>Target Constrained</value>
    <comment>DisplayName for DomainProperty &apos;TargetConstrained&apos; on DomainClass &apos;OneToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.OneToOneRelation/TargetConstrained.Category" xml:space="preserve">
    <value>Target</value>
    <comment>Category for DomainProperty &apos;TargetConstrained&apos; on DomainClass &apos;OneToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.OneToOneRelation/TargetCustomAccess.Description" xml:space="preserve">
    <value></value>
    <comment>Description for DomainProperty &apos;TargetCustomAccess&apos; on DomainClass &apos;OneToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.OneToOneRelation/TargetCustomAccess.DisplayName" xml:space="preserve">
    <value>Target Custom Access</value>
    <comment>DisplayName for DomainProperty &apos;TargetCustomAccess&apos; on DomainClass &apos;OneToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.OneToOneRelation/TargetCustomAccess.Category" xml:space="preserve">
    <value>Target</value>
    <comment>Category for DomainProperty &apos;TargetCustomAccess&apos; on DomainClass &apos;OneToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.OneToOneRelation/TargetOuterJoin.Description" xml:space="preserve">
    <value></value>
    <comment>Description for DomainProperty &apos;TargetOuterJoin&apos; on DomainClass &apos;OneToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.OneToOneRelation/TargetOuterJoin.DisplayName" xml:space="preserve">
    <value>Target Outer Join</value>
    <comment>DisplayName for DomainProperty &apos;TargetOuterJoin&apos; on DomainClass &apos;OneToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.OneToOneRelation/TargetOuterJoin.Category" xml:space="preserve">
    <value>Target</value>
    <comment>Category for DomainProperty &apos;TargetOuterJoin&apos; on DomainClass &apos;OneToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.OneToOneRelation/SourceDescription.Description" xml:space="preserve">
    <value>Description of the property. This will appear in a &lt;summary&gt; Xml comment.</value>
    <comment>Description for DomainProperty &apos;SourceDescription&apos; on DomainClass &apos;OneToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.OneToOneRelation/SourceDescription.DisplayName" xml:space="preserve">
    <value>Source Description</value>
    <comment>DisplayName for DomainProperty &apos;SourceDescription&apos; on DomainClass &apos;OneToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.OneToOneRelation/SourceDescription.Category" xml:space="preserve">
    <value>Code Generation</value>
    <comment>Category for DomainProperty &apos;SourceDescription&apos; on DomainClass &apos;OneToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.OneToOneRelation/TargetDescription.Description" xml:space="preserve">
    <value>Description of the property. This will appear in a &lt;summary&gt; Xml comment.</value>
    <comment>Description for DomainProperty &apos;TargetDescription&apos; on DomainClass &apos;OneToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.OneToOneRelation/TargetDescription.DisplayName" xml:space="preserve">
    <value>Target Description</value>
    <comment>DisplayName for DomainProperty &apos;TargetDescription&apos; on DomainClass &apos;OneToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.OneToOneRelation/TargetDescription.Category" xml:space="preserve">
    <value>Code Generation</value>
    <comment>Category for DomainProperty &apos;TargetDescription&apos; on DomainClass &apos;OneToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.OneToOneRelation/Lazy.Description" xml:space="preserve">
    <value>Will generate BelongsTo on the target end instead of a OneToOne to support lazy.</value>
    <comment>Description for DomainProperty &apos;Lazy&apos; on DomainClass &apos;OneToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.OneToOneRelation/Lazy.DisplayName" xml:space="preserve">
    <value>Lazy</value>
    <comment>DisplayName for DomainProperty &apos;Lazy&apos; on DomainClass &apos;OneToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.OneToOneRelation/Lazy.Category" xml:space="preserve">
    <value>Code Generation</value>
    <comment>Category for DomainProperty &apos;Lazy&apos; on DomainClass &apos;OneToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.OneToOneRelation/Source.Description" xml:space="preserve">
    <value></value>
    <comment>Description for DomainRole &apos;Source&apos; on DomainRelationship &apos;OneToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.OneToOneRelation/Source.DisplayName" xml:space="preserve">
    <value>Source</value>
    <comment>DisplayName for DomainRole &apos;Source&apos; on DomainRelationship &apos;OneToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.OneToOneRelation/Source.PropertyDisplayName" xml:space="preserve">
    <value>One To One Target</value>
    <comment>PropertyDisplayName for DomainRole &apos;Source&apos; on DomainRelationship &apos;OneToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.OneToOneRelation/Target.Description" xml:space="preserve">
    <value></value>
    <comment>Description for DomainRole &apos;Target&apos; on DomainRelationship &apos;OneToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.OneToOneRelation/Target.DisplayName" xml:space="preserve">
    <value>Target</value>
    <comment>DisplayName for DomainRole &apos;Target&apos; on DomainRelationship &apos;OneToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.OneToOneRelation/Target.PropertyDisplayName" xml:space="preserve">
    <value>One To One Sources</value>
    <comment>PropertyDisplayName for DomainRole &apos;Target&apos; on DomainRelationship &apos;OneToOneRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelHasNestedClasses.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.ModelHasNestedClasses</value>
    <comment>Description for DomainClass &apos;ModelHasNestedClasses&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelHasNestedClasses.DisplayName" xml:space="preserve">
    <value>Model Has Nested Classes</value>
    <comment>DisplayName for DomainClass &apos;ModelHasNestedClasses&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelHasNestedClasses/Model.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.ModelHasNestedClasses.Model</value>
    <comment>Description for DomainRole &apos;Model&apos; on DomainRelationship &apos;ModelHasNestedClasses&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelHasNestedClasses/Model.DisplayName" xml:space="preserve">
    <value>Model</value>
    <comment>DisplayName for DomainRole &apos;Model&apos; on DomainRelationship &apos;ModelHasNestedClasses&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelHasNestedClasses/Model.PropertyDisplayName" xml:space="preserve">
    <value>Nested Classes</value>
    <comment>PropertyDisplayName for DomainRole &apos;Model&apos; on DomainRelationship &apos;ModelHasNestedClasses&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelHasNestedClasses/NestedClass.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.ModelHasNestedClasses.NestedClass</value>
    <comment>Description for DomainRole &apos;NestedClass&apos; on DomainRelationship &apos;ModelHasNestedClasses&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelHasNestedClasses/NestedClass.DisplayName" xml:space="preserve">
    <value>Nested Class</value>
    <comment>DisplayName for DomainRole &apos;NestedClass&apos; on DomainRelationship &apos;ModelHasNestedClasses&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ModelHasNestedClasses/NestedClass.PropertyDisplayName" xml:space="preserve">
    <value>Model</value>
    <comment>PropertyDisplayName for DomainRole &apos;NestedClass&apos; on DomainRelationship &apos;ModelHasNestedClasses&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NestedClassHasProperties.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.NestedClassHasProperties</value>
    <comment>Description for DomainClass &apos;NestedClassHasProperties&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NestedClassHasProperties.DisplayName" xml:space="preserve">
    <value>Nested Class Has Properties</value>
    <comment>DisplayName for DomainClass &apos;NestedClassHasProperties&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NestedClassHasProperties/NestedClass.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.NestedClassHasProperties.NestedClass</value>
    <comment>Description for DomainRole &apos;NestedClass&apos; on DomainRelationship &apos;NestedClassHasProperties&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NestedClassHasProperties/NestedClass.DisplayName" xml:space="preserve">
    <value>Nested Class</value>
    <comment>DisplayName for DomainRole &apos;NestedClass&apos; on DomainRelationship &apos;NestedClassHasProperties&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NestedClassHasProperties/NestedClass.PropertyDisplayName" xml:space="preserve">
    <value>Properties</value>
    <comment>PropertyDisplayName for DomainRole &apos;NestedClass&apos; on DomainRelationship &apos;NestedClassHasProperties&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NestedClassHasProperties/Property.Description" xml:space="preserve">
    <value></value>
    <comment>Description for DomainRole &apos;Property&apos; on DomainRelationship &apos;NestedClassHasProperties&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NestedClassHasProperties/Property.DisplayName" xml:space="preserve">
    <value>Property</value>
    <comment>DisplayName for DomainRole &apos;Property&apos; on DomainRelationship &apos;NestedClassHasProperties&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NestedClassHasProperties/Property.PropertyDisplayName" xml:space="preserve">
    <value>Nested Class</value>
    <comment>PropertyDisplayName for DomainRole &apos;Property&apos; on DomainRelationship &apos;NestedClassHasProperties&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NestedClassReferencesModelClasses.Description" xml:space="preserve">
    <value></value>
    <comment>Description for DomainClass &apos;NestedClassReferencesModelClasses&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NestedClassReferencesModelClasses.DisplayName" xml:space="preserve">
    <value>Nested Class References Model Classes</value>
    <comment>DisplayName for DomainClass &apos;NestedClassReferencesModelClasses&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NestedClassReferencesModelClasses/MapType.Description" xml:space="preserve">
    <value>Allows one to reference a different type than the property type</value>
    <comment>Description for DomainProperty &apos;MapType&apos; on DomainClass &apos;NestedClassReferencesModelClasses&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NestedClassReferencesModelClasses/MapType.DisplayName" xml:space="preserve">
    <value>Map Type</value>
    <comment>DisplayName for DomainProperty &apos;MapType&apos; on DomainClass &apos;NestedClassReferencesModelClasses&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NestedClassReferencesModelClasses/MapType.Category" xml:space="preserve">
    <value>ActiveRecord</value>
    <comment>Category for DomainProperty &apos;MapType&apos; on DomainClass &apos;NestedClassReferencesModelClasses&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NestedClassReferencesModelClasses/Insert.Description" xml:space="preserve">
    <value>Set to false to ignore this nested component when updating entities of this ActiveRecord class.</value>
    <comment>Description for DomainProperty &apos;Insert&apos; on DomainClass &apos;NestedClassReferencesModelClasses&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NestedClassReferencesModelClasses/Insert.DisplayName" xml:space="preserve">
    <value>Insert</value>
    <comment>DisplayName for DomainProperty &apos;Insert&apos; on DomainClass &apos;NestedClassReferencesModelClasses&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NestedClassReferencesModelClasses/Insert.Category" xml:space="preserve">
    <value>ActiveRecord</value>
    <comment>Category for DomainProperty &apos;Insert&apos; on DomainClass &apos;NestedClassReferencesModelClasses&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NestedClassReferencesModelClasses/Update.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.NestedClassReferencesModelClasses.Update</value>
    <comment>Description for DomainProperty &apos;Update&apos; on DomainClass &apos;NestedClassReferencesModelClasses&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NestedClassReferencesModelClasses/Update.DisplayName" xml:space="preserve">
    <value>Update</value>
    <comment>DisplayName for DomainProperty &apos;Update&apos; on DomainClass &apos;NestedClassReferencesModelClasses&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NestedClassReferencesModelClasses/Update.Category" xml:space="preserve">
    <value>ActiveRecord</value>
    <comment>Category for DomainProperty &apos;Update&apos; on DomainClass &apos;NestedClassReferencesModelClasses&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NestedClassReferencesModelClasses/ColumnPrefix.Description" xml:space="preserve">
    <value>Set to false to ignore this nested component when inserting entities of this ActiveRecord class.</value>
    <comment>Description for DomainProperty &apos;ColumnPrefix&apos; on DomainClass &apos;NestedClassReferencesModelClasses&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NestedClassReferencesModelClasses/ColumnPrefix.DisplayName" xml:space="preserve">
    <value>Column Prefix</value>
    <comment>DisplayName for DomainProperty &apos;ColumnPrefix&apos; on DomainClass &apos;NestedClassReferencesModelClasses&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NestedClassReferencesModelClasses/ColumnPrefix.Category" xml:space="preserve">
    <value>ActiveRecord</value>
    <comment>Category for DomainProperty &apos;ColumnPrefix&apos; on DomainClass &apos;NestedClassReferencesModelClasses&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NestedClassReferencesModelClasses/Description.Description" xml:space="preserve">
    <value>Description for nested property on the model class. This will appear in a &lt;summary&gt; Xml comment.</value>
    <comment>Description for DomainProperty &apos;Description&apos; on DomainClass &apos;NestedClassReferencesModelClasses&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NestedClassReferencesModelClasses/Description.DisplayName" xml:space="preserve">
    <value>Description</value>
    <comment>DisplayName for DomainProperty &apos;Description&apos; on DomainClass &apos;NestedClassReferencesModelClasses&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NestedClassReferencesModelClasses/Description.Category" xml:space="preserve">
    <value>Code Generation</value>
    <comment>Category for DomainProperty &apos;Description&apos; on DomainClass &apos;NestedClassReferencesModelClasses&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NestedClassReferencesModelClasses/PropertyName.Description" xml:space="preserve">
    <value>Name of the property on the nesting class. If not suplied, ActiveWriter will use nested class&apos; name.</value>
    <comment>Description for DomainProperty &apos;PropertyName&apos; on DomainClass &apos;NestedClassReferencesModelClasses&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NestedClassReferencesModelClasses/PropertyName.DisplayName" xml:space="preserve">
    <value>Property Name</value>
    <comment>DisplayName for DomainProperty &apos;PropertyName&apos; on DomainClass &apos;NestedClassReferencesModelClasses&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NestedClassReferencesModelClasses/PropertyName.Category" xml:space="preserve">
    <value>Code Generation</value>
    <comment>Category for DomainProperty &apos;PropertyName&apos; on DomainClass &apos;NestedClassReferencesModelClasses&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NestedClassReferencesModelClasses/NestedClass.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.NestedClassReferencesModelClasses.NestedClass</value>
    <comment>Description for DomainRole &apos;NestedClass&apos; on DomainRelationship &apos;NestedClassReferencesModelClasses&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NestedClassReferencesModelClasses/NestedClass.DisplayName" xml:space="preserve">
    <value>Nested Class</value>
    <comment>DisplayName for DomainRole &apos;NestedClass&apos; on DomainRelationship &apos;NestedClassReferencesModelClasses&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NestedClassReferencesModelClasses/NestedClass.PropertyDisplayName" xml:space="preserve">
    <value>Model Classes</value>
    <comment>PropertyDisplayName for DomainRole &apos;NestedClass&apos; on DomainRelationship &apos;NestedClassReferencesModelClasses&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NestedClassReferencesModelClasses/ModelClass.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.NestedClassReferencesModelClasses.ModelClass</value>
    <comment>Description for DomainRole &apos;ModelClass&apos; on DomainRelationship &apos;NestedClassReferencesModelClasses&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NestedClassReferencesModelClasses/ModelClass.DisplayName" xml:space="preserve">
    <value>Model Class</value>
    <comment>DisplayName for DomainRole &apos;ModelClass&apos; on DomainRelationship &apos;NestedClassReferencesModelClasses&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NestedClassReferencesModelClasses/ModelClass.PropertyDisplayName" xml:space="preserve">
    <value>Nested Classes</value>
    <comment>PropertyDisplayName for DomainRole &apos;ModelClass&apos; on DomainRelationship &apos;NestedClassReferencesModelClasses&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.InheritanceRelation.Description" xml:space="preserve">
    <value>Indicates that a class inherits from another class.</value>
    <comment>Description for DomainClass &apos;InheritanceRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.InheritanceRelation.DisplayName" xml:space="preserve">
    <value>Inheritance Relation</value>
    <comment>DisplayName for DomainClass &apos;InheritanceRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.InheritanceRelation/SourceModelClass.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.InheritanceRelation.SourceModelClass</value>
    <comment>Description for DomainRole &apos;SourceModelClass&apos; on DomainRelationship &apos;InheritanceRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.InheritanceRelation/SourceModelClass.DisplayName" xml:space="preserve">
    <value>Source Model Class</value>
    <comment>DisplayName for DomainRole &apos;SourceModelClass&apos; on DomainRelationship &apos;InheritanceRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.InheritanceRelation/SourceModelClass.PropertyDisplayName" xml:space="preserve">
    <value>Target Model Classes</value>
    <comment>PropertyDisplayName for DomainRole &apos;SourceModelClass&apos; on DomainRelationship &apos;InheritanceRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.InheritanceRelation/TargetModelClass.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.InheritanceRelation.TargetModelClass</value>
    <comment>Description for DomainRole &apos;TargetModelClass&apos; on DomainRelationship &apos;InheritanceRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.InheritanceRelation/TargetModelClass.DisplayName" xml:space="preserve">
    <value>Target Model Class</value>
    <comment>DisplayName for DomainRole &apos;TargetModelClass&apos; on DomainRelationship &apos;InheritanceRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.InheritanceRelation/TargetModelClass.PropertyDisplayName" xml:space="preserve">
    <value>Source Model Classes</value>
    <comment>PropertyDisplayName for DomainRole &apos;TargetModelClass&apos; on DomainRelationship &apos;InheritanceRelation&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.PropertyAccess/Property.DisplayName" xml:space="preserve">
    <value>Property</value>
    <comment>Display name for EnumerationLiteral &apos;Property&apos; on DomainEnumeration &apos;PropertyAccess&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.PropertyAccess/Property.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.PropertyAccess.Property</value>
    <comment>Description for EnumerationLiteral &apos;Property&apos; on DomainEnumeration &apos;PropertyAccess&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.PropertyAccess/FieldCamelcase.DisplayName" xml:space="preserve">
    <value>FieldCamelcase</value>
    <comment>Display name for EnumerationLiteral &apos;FieldCamelcase&apos; on DomainEnumeration &apos;PropertyAccess&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.PropertyAccess/FieldCamelcase.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.PropertyAccess.FieldCamelcase</value>
    <comment>Description for EnumerationLiteral &apos;FieldCamelcase&apos; on DomainEnumeration &apos;PropertyAccess&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.PropertyAccess/FieldCamelcaseUnderscore.DisplayName" xml:space="preserve">
    <value>FieldCamelcaseUnderscore</value>
    <comment>Display name for EnumerationLiteral &apos;FieldCamelcaseUnderscore&apos; on DomainEnumeration &apos;PropertyAccess&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.PropertyAccess/FieldCamelcaseUnderscore.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.PropertyAccess.FieldCamelcaseUnderscore</value>
    <comment>Description for EnumerationLiteral &apos;FieldCamelcaseUnderscore&apos; on DomainEnumeration &apos;PropertyAccess&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.PropertyAccess/FieldPascalcaseMUnderscore.DisplayName" xml:space="preserve">
    <value>FieldPascalcaseMUnderscore</value>
    <comment>Display name for EnumerationLiteral &apos;FieldPascalcaseMUnderscore&apos; on DomainEnumeration &apos;PropertyAccess&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.PropertyAccess/FieldPascalcaseMUnderscore.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.PropertyAccess.FieldPascalcaseMUnderscore</value>
    <comment>Description for EnumerationLiteral &apos;FieldPascalcaseMUnderscore&apos; on DomainEnumeration &apos;PropertyAccess&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.PropertyAccess/FieldLowercaseUnderscore.DisplayName" xml:space="preserve">
    <value>FieldLowercaseUnderscore</value>
    <comment>Display name for EnumerationLiteral &apos;FieldLowercaseUnderscore&apos; on DomainEnumeration &apos;PropertyAccess&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.PropertyAccess/FieldLowercaseUnderscore.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.PropertyAccess.FieldLowercaseUnderscore</value>
    <comment>Description for EnumerationLiteral &apos;FieldLowercaseUnderscore&apos; on DomainEnumeration &apos;PropertyAccess&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.PropertyAccess/NosetterCamelcase.DisplayName" xml:space="preserve">
    <value>NosetterCamelcase</value>
    <comment>Display name for EnumerationLiteral &apos;NosetterCamelcase&apos; on DomainEnumeration &apos;PropertyAccess&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.PropertyAccess/NosetterCamelcase.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.PropertyAccess.NosetterCamelcase</value>
    <comment>Description for EnumerationLiteral &apos;NosetterCamelcase&apos; on DomainEnumeration &apos;PropertyAccess&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.PropertyAccess/NosetterCamelcaseUnderscore.DisplayName" xml:space="preserve">
    <value>NosetterCamelcaseUnderscore</value>
    <comment>Display name for EnumerationLiteral &apos;NosetterCamelcaseUnderscore&apos; on DomainEnumeration &apos;PropertyAccess&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.PropertyAccess/NosetterCamelcaseUnderscore.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.PropertyAccess.NosetterCamelcaseUnderscore</value>
    <comment>Description for EnumerationLiteral &apos;NosetterCamelcaseUnderscore&apos; on DomainEnumeration &apos;PropertyAccess&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.PropertyAccess/NosetterPascalcaseMUnderscore.DisplayName" xml:space="preserve">
    <value>NosetterPascalcaseMUnderscore</value>
    <comment>Display name for EnumerationLiteral &apos;NosetterPascalcaseMUnderscore&apos; on DomainEnumeration &apos;PropertyAccess&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.PropertyAccess/NosetterPascalcaseMUnderscore.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.PropertyAccess.NosetterPascalcaseMUnderscore</value>
    <comment>Description for EnumerationLiteral &apos;NosetterPascalcaseMUnderscore&apos; on DomainEnumeration &apos;PropertyAccess&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.PropertyAccess/NosetterLowercaseUnderscore.DisplayName" xml:space="preserve">
    <value>NosetterLowercaseUnderscore</value>
    <comment>Display name for EnumerationLiteral &apos;NosetterLowercaseUnderscore&apos; on DomainEnumeration &apos;PropertyAccess&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.PropertyAccess/NosetterLowercaseUnderscore.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.PropertyAccess.NosetterLowercaseUnderscore</value>
    <comment>Description for EnumerationLiteral &apos;NosetterLowercaseUnderscore&apos; on DomainEnumeration &apos;PropertyAccess&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.PropertyAccess/Field.DisplayName" xml:space="preserve">
    <value>Field</value>
    <comment>Display name for EnumerationLiteral &apos;Field&apos; on DomainEnumeration &apos;PropertyAccess&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.PropertyAccess/Field.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.PropertyAccess.Field</value>
    <comment>Description for EnumerationLiteral &apos;Field&apos; on DomainEnumeration &apos;PropertyAccess&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.PropertyAccess/NosetterLowercase.DisplayName" xml:space="preserve">
    <value>NosetterLowercase</value>
    <comment>Display name for EnumerationLiteral &apos;NosetterLowercase&apos; on DomainEnumeration &apos;PropertyAccess&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.PropertyAccess/NosetterLowercase.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.PropertyAccess.NosetterLowercase</value>
    <comment>Description for EnumerationLiteral &apos;NosetterLowercase&apos; on DomainEnumeration &apos;PropertyAccess&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.CacheEnum/Undefined.DisplayName" xml:space="preserve">
    <value>Undefined</value>
    <comment>Display name for EnumerationLiteral &apos;Undefined&apos; on DomainEnumeration &apos;CacheEnum&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.CacheEnum/Undefined.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.CacheEnum.Undefined</value>
    <comment>Description for EnumerationLiteral &apos;Undefined&apos; on DomainEnumeration &apos;CacheEnum&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.CacheEnum/ReadOnly.DisplayName" xml:space="preserve">
    <value>ReadOnly</value>
    <comment>Display name for EnumerationLiteral &apos;ReadOnly&apos; on DomainEnumeration &apos;CacheEnum&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.CacheEnum/ReadOnly.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.CacheEnum.ReadOnly</value>
    <comment>Description for EnumerationLiteral &apos;ReadOnly&apos; on DomainEnumeration &apos;CacheEnum&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.CacheEnum/ReadWrite.DisplayName" xml:space="preserve">
    <value>ReadWrite</value>
    <comment>Display name for EnumerationLiteral &apos;ReadWrite&apos; on DomainEnumeration &apos;CacheEnum&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.CacheEnum/ReadWrite.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.CacheEnum.ReadWrite</value>
    <comment>Description for EnumerationLiteral &apos;ReadWrite&apos; on DomainEnumeration &apos;CacheEnum&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.CacheEnum/NonStrictReadWrite.DisplayName" xml:space="preserve">
    <value>NonStrictReadWrite</value>
    <comment>Display name for EnumerationLiteral &apos;NonStrictReadWrite&apos; on DomainEnumeration &apos;CacheEnum&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.CacheEnum/NonStrictReadWrite.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.CacheEnum.NonStrictReadWrite</value>
    <comment>Description for EnumerationLiteral &apos;NonStrictReadWrite&apos; on DomainEnumeration &apos;CacheEnum&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.PrimaryKeyType/None.DisplayName" xml:space="preserve">
    <value>None</value>
    <comment>Display name for EnumerationLiteral &apos;None&apos; on DomainEnumeration &apos;PrimaryKeyType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.PrimaryKeyType/None.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.PrimaryKeyType.None</value>
    <comment>Description for EnumerationLiteral &apos;None&apos; on DomainEnumeration &apos;PrimaryKeyType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.PrimaryKeyType/Identity.DisplayName" xml:space="preserve">
    <value>Identity</value>
    <comment>Display name for EnumerationLiteral &apos;Identity&apos; on DomainEnumeration &apos;PrimaryKeyType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.PrimaryKeyType/Identity.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.PrimaryKeyType.Identity</value>
    <comment>Description for EnumerationLiteral &apos;Identity&apos; on DomainEnumeration &apos;PrimaryKeyType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.PrimaryKeyType/Sequence.DisplayName" xml:space="preserve">
    <value>Sequence</value>
    <comment>Display name for EnumerationLiteral &apos;Sequence&apos; on DomainEnumeration &apos;PrimaryKeyType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.PrimaryKeyType/Sequence.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.PrimaryKeyType.Sequence</value>
    <comment>Description for EnumerationLiteral &apos;Sequence&apos; on DomainEnumeration &apos;PrimaryKeyType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.PrimaryKeyType/HiLo.DisplayName" xml:space="preserve">
    <value>HiLo</value>
    <comment>Display name for EnumerationLiteral &apos;HiLo&apos; on DomainEnumeration &apos;PrimaryKeyType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.PrimaryKeyType/HiLo.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.PrimaryKeyType.HiLo</value>
    <comment>Description for EnumerationLiteral &apos;HiLo&apos; on DomainEnumeration &apos;PrimaryKeyType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.PrimaryKeyType/SeqHiLo.DisplayName" xml:space="preserve">
    <value>SeqHiLo</value>
    <comment>Display name for EnumerationLiteral &apos;SeqHiLo&apos; on DomainEnumeration &apos;PrimaryKeyType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.PrimaryKeyType/SeqHiLo.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.PrimaryKeyType.SeqHiLo</value>
    <comment>Description for EnumerationLiteral &apos;SeqHiLo&apos; on DomainEnumeration &apos;PrimaryKeyType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.PrimaryKeyType/UuidHex.DisplayName" xml:space="preserve">
    <value>UuidHex</value>
    <comment>Display name for EnumerationLiteral &apos;UuidHex&apos; on DomainEnumeration &apos;PrimaryKeyType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.PrimaryKeyType/UuidHex.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.PrimaryKeyType.UuidHex</value>
    <comment>Description for EnumerationLiteral &apos;UuidHex&apos; on DomainEnumeration &apos;PrimaryKeyType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.PrimaryKeyType/UuidString.DisplayName" xml:space="preserve">
    <value>UuidString</value>
    <comment>Display name for EnumerationLiteral &apos;UuidString&apos; on DomainEnumeration &apos;PrimaryKeyType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.PrimaryKeyType/UuidString.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.PrimaryKeyType.UuidString</value>
    <comment>Description for EnumerationLiteral &apos;UuidString&apos; on DomainEnumeration &apos;PrimaryKeyType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.PrimaryKeyType/Guid.DisplayName" xml:space="preserve">
    <value>Guid</value>
    <comment>Display name for EnumerationLiteral &apos;Guid&apos; on DomainEnumeration &apos;PrimaryKeyType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.PrimaryKeyType/Guid.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.PrimaryKeyType.Guid</value>
    <comment>Description for EnumerationLiteral &apos;Guid&apos; on DomainEnumeration &apos;PrimaryKeyType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.PrimaryKeyType/GuidComb.DisplayName" xml:space="preserve">
    <value>GuidComb</value>
    <comment>Display name for EnumerationLiteral &apos;GuidComb&apos; on DomainEnumeration &apos;PrimaryKeyType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.PrimaryKeyType/GuidComb.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.PrimaryKeyType.GuidComb</value>
    <comment>Description for EnumerationLiteral &apos;GuidComb&apos; on DomainEnumeration &apos;PrimaryKeyType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.PrimaryKeyType/Native.DisplayName" xml:space="preserve">
    <value>Native</value>
    <comment>Display name for EnumerationLiteral &apos;Native&apos; on DomainEnumeration &apos;PrimaryKeyType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.PrimaryKeyType/Native.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.PrimaryKeyType.Native</value>
    <comment>Description for EnumerationLiteral &apos;Native&apos; on DomainEnumeration &apos;PrimaryKeyType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.PrimaryKeyType/Assigned.DisplayName" xml:space="preserve">
    <value>Assigned</value>
    <comment>Display name for EnumerationLiteral &apos;Assigned&apos; on DomainEnumeration &apos;PrimaryKeyType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.PrimaryKeyType/Assigned.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.PrimaryKeyType.Assigned</value>
    <comment>Description for EnumerationLiteral &apos;Assigned&apos; on DomainEnumeration &apos;PrimaryKeyType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.PrimaryKeyType/Foreign.DisplayName" xml:space="preserve">
    <value>Foreign</value>
    <comment>Display name for EnumerationLiteral &apos;Foreign&apos; on DomainEnumeration &apos;PrimaryKeyType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.PrimaryKeyType/Foreign.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.PrimaryKeyType.Foreign</value>
    <comment>Description for EnumerationLiteral &apos;Foreign&apos; on DomainEnumeration &apos;PrimaryKeyType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.KeyType/None.DisplayName" xml:space="preserve">
    <value>None</value>
    <comment>Display name for EnumerationLiteral &apos;None&apos; on DomainEnumeration &apos;KeyType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.KeyType/None.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.KeyType.None</value>
    <comment>Description for EnumerationLiteral &apos;None&apos; on DomainEnumeration &apos;KeyType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.KeyType/PrimaryKey.DisplayName" xml:space="preserve">
    <value>PrimaryKey</value>
    <comment>Display name for EnumerationLiteral &apos;PrimaryKey&apos; on DomainEnumeration &apos;KeyType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.KeyType/PrimaryKey.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.KeyType.PrimaryKey</value>
    <comment>Description for EnumerationLiteral &apos;PrimaryKey&apos; on DomainEnumeration &apos;KeyType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.KeyType/CompositeKey.DisplayName" xml:space="preserve">
    <value>CompositeKey</value>
    <comment>Display name for EnumerationLiteral &apos;CompositeKey&apos; on DomainEnumeration &apos;KeyType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.KeyType/CompositeKey.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.KeyType.CompositeKey</value>
    <comment>Description for EnumerationLiteral &apos;CompositeKey&apos; on DomainEnumeration &apos;KeyType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.CascadeEnum/None.DisplayName" xml:space="preserve">
    <value>None</value>
    <comment>Display name for EnumerationLiteral &apos;None&apos; on DomainEnumeration &apos;CascadeEnum&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.CascadeEnum/None.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.CascadeEnum.None</value>
    <comment>Description for EnumerationLiteral &apos;None&apos; on DomainEnumeration &apos;CascadeEnum&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.CascadeEnum/All.DisplayName" xml:space="preserve">
    <value>All</value>
    <comment>Display name for EnumerationLiteral &apos;All&apos; on DomainEnumeration &apos;CascadeEnum&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.CascadeEnum/All.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.CascadeEnum.All</value>
    <comment>Description for EnumerationLiteral &apos;All&apos; on DomainEnumeration &apos;CascadeEnum&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.CascadeEnum/SaveUpdate.DisplayName" xml:space="preserve">
    <value>SaveUpdate</value>
    <comment>Display name for EnumerationLiteral &apos;SaveUpdate&apos; on DomainEnumeration &apos;CascadeEnum&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.CascadeEnum/SaveUpdate.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.CascadeEnum.SaveUpdate</value>
    <comment>Description for EnumerationLiteral &apos;SaveUpdate&apos; on DomainEnumeration &apos;CascadeEnum&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.CascadeEnum/Delete.DisplayName" xml:space="preserve">
    <value>Delete</value>
    <comment>Display name for EnumerationLiteral &apos;Delete&apos; on DomainEnumeration &apos;CascadeEnum&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.CascadeEnum/Delete.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.CascadeEnum.Delete</value>
    <comment>Description for EnumerationLiteral &apos;Delete&apos; on DomainEnumeration &apos;CascadeEnum&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.OuterJoinEnum/Auto.DisplayName" xml:space="preserve">
    <value>Auto</value>
    <comment>Display name for EnumerationLiteral &apos;Auto&apos; on DomainEnumeration &apos;OuterJoinEnum&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.OuterJoinEnum/Auto.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.OuterJoinEnum.Auto</value>
    <comment>Description for EnumerationLiteral &apos;Auto&apos; on DomainEnumeration &apos;OuterJoinEnum&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.OuterJoinEnum/True.DisplayName" xml:space="preserve">
    <value>True</value>
    <comment>Display name for EnumerationLiteral &apos;True&apos; on DomainEnumeration &apos;OuterJoinEnum&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.OuterJoinEnum/True.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.OuterJoinEnum.True</value>
    <comment>Description for EnumerationLiteral &apos;True&apos; on DomainEnumeration &apos;OuterJoinEnum&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.OuterJoinEnum/False.DisplayName" xml:space="preserve">
    <value>False</value>
    <comment>Display name for EnumerationLiteral &apos;False&apos; on DomainEnumeration &apos;OuterJoinEnum&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.OuterJoinEnum/False.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.OuterJoinEnum.False</value>
    <comment>Description for EnumerationLiteral &apos;False&apos; on DomainEnumeration &apos;OuterJoinEnum&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.InheritedRelationType/Inherited.DisplayName" xml:space="preserve">
    <value>Inherited</value>
    <comment>Display name for EnumerationLiteral &apos;Inherited&apos; on DomainEnumeration &apos;InheritedRelationType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.InheritedRelationType/Inherited.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.InheritedRelationType.Inherited</value>
    <comment>Description for EnumerationLiteral &apos;Inherited&apos; on DomainEnumeration &apos;InheritedRelationType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.InheritedRelationType/Guess.DisplayName" xml:space="preserve">
    <value>Guess</value>
    <comment>Display name for EnumerationLiteral &apos;Guess&apos; on DomainEnumeration &apos;InheritedRelationType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.InheritedRelationType/Guess.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.InheritedRelationType.Guess</value>
    <comment>Description for EnumerationLiteral &apos;Guess&apos; on DomainEnumeration &apos;InheritedRelationType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.InheritedRelationType/Bag.DisplayName" xml:space="preserve">
    <value>Bag</value>
    <comment>Display name for EnumerationLiteral &apos;Bag&apos; on DomainEnumeration &apos;InheritedRelationType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.InheritedRelationType/Bag.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.InheritedRelationType.Bag</value>
    <comment>Description for EnumerationLiteral &apos;Bag&apos; on DomainEnumeration &apos;InheritedRelationType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.InheritedRelationType/Set.DisplayName" xml:space="preserve">
    <value>Set</value>
    <comment>Display name for EnumerationLiteral &apos;Set&apos; on DomainEnumeration &apos;InheritedRelationType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.InheritedRelationType/Set.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.InheritedRelationType.Set</value>
    <comment>Description for EnumerationLiteral &apos;Set&apos; on DomainEnumeration &apos;InheritedRelationType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.InheritedRelationType/IdBag.DisplayName" xml:space="preserve">
    <value>IdBag</value>
    <comment>Display name for EnumerationLiteral &apos;IdBag&apos; on DomainEnumeration &apos;InheritedRelationType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.InheritedRelationType/IdBag.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.InheritedRelationType.IdBag</value>
    <comment>Description for EnumerationLiteral &apos;IdBag&apos; on DomainEnumeration &apos;InheritedRelationType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.InheritedRelationType/Map.DisplayName" xml:space="preserve">
    <value>Map</value>
    <comment>Display name for EnumerationLiteral &apos;Map&apos; on DomainEnumeration &apos;InheritedRelationType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.InheritedRelationType/Map.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.InheritedRelationType.Map</value>
    <comment>Description for EnumerationLiteral &apos;Map&apos; on DomainEnumeration &apos;InheritedRelationType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.InheritedRelationType/List.DisplayName" xml:space="preserve">
    <value>List</value>
    <comment>Display name for EnumerationLiteral &apos;List&apos; on DomainEnumeration &apos;InheritedRelationType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.InheritedRelationType/List.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.InheritedRelationType.List</value>
    <comment>Description for EnumerationLiteral &apos;List&apos; on DomainEnumeration &apos;InheritedRelationType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.RelationType/Guess.DisplayName" xml:space="preserve">
    <value>Guess</value>
    <comment>Display name for EnumerationLiteral &apos;Guess&apos; on DomainEnumeration &apos;RelationType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.RelationType/Guess.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.RelationType.Guess</value>
    <comment>Description for EnumerationLiteral &apos;Guess&apos; on DomainEnumeration &apos;RelationType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.RelationType/Bag.DisplayName" xml:space="preserve">
    <value>Bag</value>
    <comment>Display name for EnumerationLiteral &apos;Bag&apos; on DomainEnumeration &apos;RelationType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.RelationType/Bag.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.RelationType.Bag</value>
    <comment>Description for EnumerationLiteral &apos;Bag&apos; on DomainEnumeration &apos;RelationType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.RelationType/Set.DisplayName" xml:space="preserve">
    <value>Set</value>
    <comment>Display name for EnumerationLiteral &apos;Set&apos; on DomainEnumeration &apos;RelationType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.RelationType/Set.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.RelationType.Set</value>
    <comment>Description for EnumerationLiteral &apos;Set&apos; on DomainEnumeration &apos;RelationType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.RelationType/IdBag.DisplayName" xml:space="preserve">
    <value>IdBag</value>
    <comment>Display name for EnumerationLiteral &apos;IdBag&apos; on DomainEnumeration &apos;RelationType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.RelationType/IdBag.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.RelationType.IdBag</value>
    <comment>Description for EnumerationLiteral &apos;IdBag&apos; on DomainEnumeration &apos;RelationType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.RelationType/Map.DisplayName" xml:space="preserve">
    <value>Map</value>
    <comment>Display name for EnumerationLiteral &apos;Map&apos; on DomainEnumeration &apos;RelationType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.RelationType/Map.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.RelationType.Map</value>
    <comment>Description for EnumerationLiteral &apos;Map&apos; on DomainEnumeration &apos;RelationType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.RelationType/List.DisplayName" xml:space="preserve">
    <value>List</value>
    <comment>Display name for EnumerationLiteral &apos;List&apos; on DomainEnumeration &apos;RelationType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.RelationType/List.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.RelationType.List</value>
    <comment>Description for EnumerationLiteral &apos;List&apos; on DomainEnumeration &apos;RelationType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NHibernateType/AnsiChar.DisplayName" xml:space="preserve">
    <value>AnsiChar</value>
    <comment>Display name for EnumerationLiteral &apos;AnsiChar&apos; on DomainEnumeration &apos;NHibernateType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NHibernateType/AnsiChar.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.NHibernateType.AnsiChar</value>
    <comment>Description for EnumerationLiteral &apos;AnsiChar&apos; on DomainEnumeration &apos;NHibernateType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NHibernateType/Single.DisplayName" xml:space="preserve">
    <value>Single</value>
    <comment>Display name for EnumerationLiteral &apos;Single&apos; on DomainEnumeration &apos;NHibernateType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NHibernateType/Single.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.NHibernateType.Single</value>
    <comment>Description for EnumerationLiteral &apos;Single&apos; on DomainEnumeration &apos;NHibernateType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NHibernateType/AnsiString.DisplayName" xml:space="preserve">
    <value>AnsiString</value>
    <comment>Display name for EnumerationLiteral &apos;AnsiString&apos; on DomainEnumeration &apos;NHibernateType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NHibernateType/AnsiString.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.NHibernateType.AnsiString</value>
    <comment>Description for EnumerationLiteral &apos;AnsiString&apos; on DomainEnumeration &apos;NHibernateType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NHibernateType/CultureInfo.DisplayName" xml:space="preserve">
    <value>CultureInfo</value>
    <comment>Display name for EnumerationLiteral &apos;CultureInfo&apos; on DomainEnumeration &apos;NHibernateType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NHibernateType/CultureInfo.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.NHibernateType.CultureInfo</value>
    <comment>Description for EnumerationLiteral &apos;CultureInfo&apos; on DomainEnumeration &apos;NHibernateType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NHibernateType/Binary.DisplayName" xml:space="preserve">
    <value>Binary</value>
    <comment>Display name for EnumerationLiteral &apos;Binary&apos; on DomainEnumeration &apos;NHibernateType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NHibernateType/Binary.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.NHibernateType.Binary</value>
    <comment>Description for EnumerationLiteral &apos;Binary&apos; on DomainEnumeration &apos;NHibernateType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NHibernateType/Type.DisplayName" xml:space="preserve">
    <value>Type</value>
    <comment>Display name for EnumerationLiteral &apos;Type&apos; on DomainEnumeration &apos;NHibernateType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NHibernateType/Type.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.NHibernateType.Type</value>
    <comment>Description for EnumerationLiteral &apos;Type&apos; on DomainEnumeration &apos;NHibernateType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NHibernateType/String.DisplayName" xml:space="preserve">
    <value>String</value>
    <comment>Display name for EnumerationLiteral &apos;String&apos; on DomainEnumeration &apos;NHibernateType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NHibernateType/String.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.NHibernateType.String</value>
    <comment>Description for EnumerationLiteral &apos;String&apos; on DomainEnumeration &apos;NHibernateType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NHibernateType/StringClob.DisplayName" xml:space="preserve">
    <value>StringClob</value>
    <comment>Display name for EnumerationLiteral &apos;StringClob&apos; on DomainEnumeration &apos;NHibernateType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NHibernateType/StringClob.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.NHibernateType.StringClob</value>
    <comment>Description for EnumerationLiteral &apos;StringClob&apos; on DomainEnumeration &apos;NHibernateType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NHibernateType/BinaryBlob.DisplayName" xml:space="preserve">
    <value>BinaryBlob</value>
    <comment>Display name for EnumerationLiteral &apos;BinaryBlob&apos; on DomainEnumeration &apos;NHibernateType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NHibernateType/BinaryBlob.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.NHibernateType.BinaryBlob</value>
    <comment>Description for EnumerationLiteral &apos;BinaryBlob&apos; on DomainEnumeration &apos;NHibernateType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NHibernateType/Boolean.DisplayName" xml:space="preserve">
    <value>Boolean</value>
    <comment>Display name for EnumerationLiteral &apos;Boolean&apos; on DomainEnumeration &apos;NHibernateType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NHibernateType/Boolean.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.NHibernateType.Boolean</value>
    <comment>Description for EnumerationLiteral &apos;Boolean&apos; on DomainEnumeration &apos;NHibernateType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NHibernateType/Byte.DisplayName" xml:space="preserve">
    <value>Byte</value>
    <comment>Display name for EnumerationLiteral &apos;Byte&apos; on DomainEnumeration &apos;NHibernateType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NHibernateType/Byte.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.NHibernateType.Byte</value>
    <comment>Description for EnumerationLiteral &apos;Byte&apos; on DomainEnumeration &apos;NHibernateType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NHibernateType/Char.DisplayName" xml:space="preserve">
    <value>Char</value>
    <comment>Display name for EnumerationLiteral &apos;Char&apos; on DomainEnumeration &apos;NHibernateType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NHibernateType/Char.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.NHibernateType.Char</value>
    <comment>Description for EnumerationLiteral &apos;Char&apos; on DomainEnumeration &apos;NHibernateType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NHibernateType/DateTime.DisplayName" xml:space="preserve">
    <value>DateTime</value>
    <comment>Display name for EnumerationLiteral &apos;DateTime&apos; on DomainEnumeration &apos;NHibernateType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NHibernateType/DateTime.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.NHibernateType.DateTime</value>
    <comment>Description for EnumerationLiteral &apos;DateTime&apos; on DomainEnumeration &apos;NHibernateType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NHibernateType/Decimal.DisplayName" xml:space="preserve">
    <value>Decimal</value>
    <comment>Display name for EnumerationLiteral &apos;Decimal&apos; on DomainEnumeration &apos;NHibernateType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NHibernateType/Decimal.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.NHibernateType.Decimal</value>
    <comment>Description for EnumerationLiteral &apos;Decimal&apos; on DomainEnumeration &apos;NHibernateType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NHibernateType/Double.DisplayName" xml:space="preserve">
    <value>Double</value>
    <comment>Display name for EnumerationLiteral &apos;Double&apos; on DomainEnumeration &apos;NHibernateType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NHibernateType/Double.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.NHibernateType.Double</value>
    <comment>Description for EnumerationLiteral &apos;Double&apos; on DomainEnumeration &apos;NHibernateType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NHibernateType/Guid.DisplayName" xml:space="preserve">
    <value>Guid</value>
    <comment>Display name for EnumerationLiteral &apos;Guid&apos; on DomainEnumeration &apos;NHibernateType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NHibernateType/Guid.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.NHibernateType.Guid</value>
    <comment>Description for EnumerationLiteral &apos;Guid&apos; on DomainEnumeration &apos;NHibernateType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NHibernateType/Int16.DisplayName" xml:space="preserve">
    <value>Int16</value>
    <comment>Display name for EnumerationLiteral &apos;Int16&apos; on DomainEnumeration &apos;NHibernateType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NHibernateType/Int16.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.NHibernateType.Int16</value>
    <comment>Description for EnumerationLiteral &apos;Int16&apos; on DomainEnumeration &apos;NHibernateType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NHibernateType/Int32.DisplayName" xml:space="preserve">
    <value>Int32</value>
    <comment>Display name for EnumerationLiteral &apos;Int32&apos; on DomainEnumeration &apos;NHibernateType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NHibernateType/Int32.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.NHibernateType.Int32</value>
    <comment>Description for EnumerationLiteral &apos;Int32&apos; on DomainEnumeration &apos;NHibernateType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NHibernateType/Int64.DisplayName" xml:space="preserve">
    <value>Int64</value>
    <comment>Display name for EnumerationLiteral &apos;Int64&apos; on DomainEnumeration &apos;NHibernateType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NHibernateType/Int64.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.NHibernateType.Int64</value>
    <comment>Description for EnumerationLiteral &apos;Int64&apos; on DomainEnumeration &apos;NHibernateType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NHibernateType/Ticks.DisplayName" xml:space="preserve">
    <value>Ticks</value>
    <comment>Display name for EnumerationLiteral &apos;Ticks&apos; on DomainEnumeration &apos;NHibernateType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NHibernateType/Ticks.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.NHibernateType.Ticks</value>
    <comment>Description for EnumerationLiteral &apos;Ticks&apos; on DomainEnumeration &apos;NHibernateType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NHibernateType/TimeSpan.DisplayName" xml:space="preserve">
    <value>TimeSpan</value>
    <comment>Display name for EnumerationLiteral &apos;TimeSpan&apos; on DomainEnumeration &apos;NHibernateType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NHibernateType/TimeSpan.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.NHibernateType.TimeSpan</value>
    <comment>Description for EnumerationLiteral &apos;TimeSpan&apos; on DomainEnumeration &apos;NHibernateType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NHibernateType/Timestamp.DisplayName" xml:space="preserve">
    <value>Timestamp</value>
    <comment>Display name for EnumerationLiteral &apos;Timestamp&apos; on DomainEnumeration &apos;NHibernateType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NHibernateType/Timestamp.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.NHibernateType.Timestamp</value>
    <comment>Description for EnumerationLiteral &apos;Timestamp&apos; on DomainEnumeration &apos;NHibernateType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NHibernateType/TrueFalse.DisplayName" xml:space="preserve">
    <value>TrueFalse</value>
    <comment>Display name for EnumerationLiteral &apos;TrueFalse&apos; on DomainEnumeration &apos;NHibernateType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NHibernateType/TrueFalse.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.NHibernateType.TrueFalse</value>
    <comment>Description for EnumerationLiteral &apos;TrueFalse&apos; on DomainEnumeration &apos;NHibernateType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NHibernateType/YesNo.DisplayName" xml:space="preserve">
    <value>YesNo</value>
    <comment>Display name for EnumerationLiteral &apos;YesNo&apos; on DomainEnumeration &apos;NHibernateType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NHibernateType/YesNo.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.NHibernateType.YesNo</value>
    <comment>Description for EnumerationLiteral &apos;YesNo&apos; on DomainEnumeration &apos;NHibernateType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NHibernateType/Custom.DisplayName" xml:space="preserve">
    <value>Custom</value>
    <comment>Display name for EnumerationLiteral &apos;Custom&apos; on DomainEnumeration &apos;NHibernateType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NHibernateType/Custom.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.NHibernateType.Custom</value>
    <comment>Description for EnumerationLiteral &apos;Custom&apos; on DomainEnumeration &apos;NHibernateType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Accessor/Public.DisplayName" xml:space="preserve">
    <value>Public</value>
    <comment>Display name for EnumerationLiteral &apos;Public&apos; on DomainEnumeration &apos;Accessor&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Accessor/Public.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.Accessor.Public</value>
    <comment>Description for EnumerationLiteral &apos;Public&apos; on DomainEnumeration &apos;Accessor&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Accessor/Private.DisplayName" xml:space="preserve">
    <value>Private</value>
    <comment>Display name for EnumerationLiteral &apos;Private&apos; on DomainEnumeration &apos;Accessor&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Accessor/Private.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.Accessor.Private</value>
    <comment>Description for EnumerationLiteral &apos;Private&apos; on DomainEnumeration &apos;Accessor&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Accessor/Protected.DisplayName" xml:space="preserve">
    <value>Protected</value>
    <comment>Display name for EnumerationLiteral &apos;Protected&apos; on DomainEnumeration &apos;Accessor&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Accessor/Protected.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.Accessor.Protected</value>
    <comment>Description for EnumerationLiteral &apos;Protected&apos; on DomainEnumeration &apos;Accessor&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.PropertyType/Property.DisplayName" xml:space="preserve">
    <value>Property</value>
    <comment>Display name for EnumerationLiteral &apos;Property&apos; on DomainEnumeration &apos;PropertyType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.PropertyType/Property.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.PropertyType.Property</value>
    <comment>Description for EnumerationLiteral &apos;Property&apos; on DomainEnumeration &apos;PropertyType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.PropertyType/Field.DisplayName" xml:space="preserve">
    <value>Field</value>
    <comment>Display name for EnumerationLiteral &apos;Field&apos; on DomainEnumeration &apos;PropertyType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.PropertyType/Field.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.PropertyType.Field</value>
    <comment>Description for EnumerationLiteral &apos;Field&apos; on DomainEnumeration &apos;PropertyType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.PropertyType/Version.DisplayName" xml:space="preserve">
    <value>Version</value>
    <comment>Display name for EnumerationLiteral &apos;Version&apos; on DomainEnumeration &apos;PropertyType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.PropertyType/Version.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.PropertyType.Version</value>
    <comment>Description for EnumerationLiteral &apos;Version&apos; on DomainEnumeration &apos;PropertyType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.PropertyType/Timestamp.DisplayName" xml:space="preserve">
    <value>Timestamp</value>
    <comment>Display name for EnumerationLiteral &apos;Timestamp&apos; on DomainEnumeration &apos;PropertyType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.PropertyType/Timestamp.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.PropertyType.Timestamp</value>
    <comment>Description for EnumerationLiteral &apos;Timestamp&apos; on DomainEnumeration &apos;PropertyType&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.FieldCase/Unchanged.DisplayName" xml:space="preserve">
    <value>Unchanged</value>
    <comment>Display name for EnumerationLiteral &apos;Unchanged&apos; on DomainEnumeration &apos;FieldCase&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.FieldCase/Unchanged.Description" xml:space="preserve">
    <value></value>
    <comment>Description for EnumerationLiteral &apos;Unchanged&apos; on DomainEnumeration &apos;FieldCase&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.FieldCase/Camelcase.DisplayName" xml:space="preserve">
    <value>Camelcase</value>
    <comment>Display name for EnumerationLiteral &apos;Camelcase&apos; on DomainEnumeration &apos;FieldCase&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.FieldCase/Camelcase.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.FieldCase.Camelcase</value>
    <comment>Description for EnumerationLiteral &apos;Camelcase&apos; on DomainEnumeration &apos;FieldCase&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.FieldCase/CamelcaseUnderscore.DisplayName" xml:space="preserve">
    <value>CamelcaseUnderscore</value>
    <comment>Display name for EnumerationLiteral &apos;CamelcaseUnderscore&apos; on DomainEnumeration &apos;FieldCase&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.FieldCase/CamelcaseUnderscore.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.FieldCase.CamelcaseUnderscore</value>
    <comment>Description for EnumerationLiteral &apos;CamelcaseUnderscore&apos; on DomainEnumeration &apos;FieldCase&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.FieldCase/CamelcaseMUnderscore.DisplayName" xml:space="preserve">
    <value>CamelcaseMUnderscore</value>
    <comment>Display name for EnumerationLiteral &apos;CamelcaseMUnderscore&apos; on DomainEnumeration &apos;FieldCase&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.FieldCase/CamelcaseMUnderscore.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.FieldCase.CamelcaseMUnderscore</value>
    <comment>Description for EnumerationLiteral &apos;CamelcaseMUnderscore&apos; on DomainEnumeration &apos;FieldCase&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.FieldCase/Pascalcase.DisplayName" xml:space="preserve">
    <value>Pascalcase</value>
    <comment>Display name for EnumerationLiteral &apos;Pascalcase&apos; on DomainEnumeration &apos;FieldCase&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.FieldCase/Pascalcase.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.FieldCase.Pascalcase</value>
    <comment>Description for EnumerationLiteral &apos;Pascalcase&apos; on DomainEnumeration &apos;FieldCase&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.FieldCase/PascalcaseUnderscore.DisplayName" xml:space="preserve">
    <value>PascalcaseUnderscore</value>
    <comment>Display name for EnumerationLiteral &apos;PascalcaseUnderscore&apos; on DomainEnumeration &apos;FieldCase&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.FieldCase/PascalcaseUnderscore.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.FieldCase.PascalcaseUnderscore</value>
    <comment>Description for EnumerationLiteral &apos;PascalcaseUnderscore&apos; on DomainEnumeration &apos;FieldCase&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.FieldCase/PascalcaseMUnderscore.DisplayName" xml:space="preserve">
    <value>PascalcaseMUnderscore</value>
    <comment>Display name for EnumerationLiteral &apos;PascalcaseMUnderscore&apos; on DomainEnumeration &apos;FieldCase&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.FieldCase/PascalcaseMUnderscore.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.FieldCase.PascalcaseMUnderscore</value>
    <comment>Description for EnumerationLiteral &apos;PascalcaseMUnderscore&apos; on DomainEnumeration &apos;FieldCase&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.CodeLanguage/CSharp.DisplayName" xml:space="preserve">
    <value>CSharp</value>
    <comment>Display name for EnumerationLiteral &apos;CSharp&apos; on DomainEnumeration &apos;CodeLanguage&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.CodeLanguage/CSharp.Description" xml:space="preserve">
    <value></value>
    <comment>Description for EnumerationLiteral &apos;CSharp&apos; on DomainEnumeration &apos;CodeLanguage&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.CodeLanguage/VB.DisplayName" xml:space="preserve">
    <value>VB</value>
    <comment>Display name for EnumerationLiteral &apos;VB&apos; on DomainEnumeration &apos;CodeLanguage&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.CodeLanguage/VB.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.CodeLanguage.VB</value>
    <comment>Description for EnumerationLiteral &apos;VB&apos; on DomainEnumeration &apos;CodeLanguage&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NullableUsage/No.DisplayName" xml:space="preserve">
    <value>No</value>
    <comment>Display name for EnumerationLiteral &apos;No&apos; on DomainEnumeration &apos;NullableUsage&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NullableUsage/No.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.NullableUsage.No</value>
    <comment>Description for EnumerationLiteral &apos;No&apos; on DomainEnumeration &apos;NullableUsage&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NullableUsage/Native.DisplayName" xml:space="preserve">
    <value>Native</value>
    <comment>Display name for EnumerationLiteral &apos;Native&apos; on DomainEnumeration &apos;NullableUsage&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NullableUsage/Native.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.NullableUsage.Native</value>
    <comment>Description for EnumerationLiteral &apos;Native&apos; on DomainEnumeration &apos;NullableUsage&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NullableUsage/WithHelperLibrary.DisplayName" xml:space="preserve">
    <value>WithHelperLibrary</value>
    <comment>Display name for EnumerationLiteral &apos;WithHelperLibrary&apos; on DomainEnumeration &apos;NullableUsage&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NullableUsage/WithHelperLibrary.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.NullableUsage.WithHelperLibrary</value>
    <comment>Description for EnumerationLiteral &apos;WithHelperLibrary&apos; on DomainEnumeration &apos;NullableUsage&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Polymorphism/Implicit.DisplayName" xml:space="preserve">
    <value>Implicit</value>
    <comment>Display name for EnumerationLiteral &apos;Implicit&apos; on DomainEnumeration &apos;Polymorphism&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Polymorphism/Implicit.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.Polymorphism.Implicit</value>
    <comment>Description for EnumerationLiteral &apos;Implicit&apos; on DomainEnumeration &apos;Polymorphism&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Polymorphism/Explicit.DisplayName" xml:space="preserve">
    <value>Explicit</value>
    <comment>Display name for EnumerationLiteral &apos;Explicit&apos; on DomainEnumeration &apos;Polymorphism&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.Polymorphism/Explicit.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.Polymorphism.Explicit</value>
    <comment>Description for EnumerationLiteral &apos;Explicit&apos; on DomainEnumeration &apos;Polymorphism&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.OptimisticLocking/None.DisplayName" xml:space="preserve">
    <value>None</value>
    <comment>Display name for EnumerationLiteral &apos;None&apos; on DomainEnumeration &apos;OptimisticLocking&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.OptimisticLocking/None.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.OptimisticLocking.None</value>
    <comment>Description for EnumerationLiteral &apos;None&apos; on DomainEnumeration &apos;OptimisticLocking&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.OptimisticLocking/Version.DisplayName" xml:space="preserve">
    <value>Version</value>
    <comment>Display name for EnumerationLiteral &apos;Version&apos; on DomainEnumeration &apos;OptimisticLocking&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.OptimisticLocking/Version.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.OptimisticLocking.Version</value>
    <comment>Description for EnumerationLiteral &apos;Version&apos; on DomainEnumeration &apos;OptimisticLocking&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.OptimisticLocking/Dirty.DisplayName" xml:space="preserve">
    <value>Dirty</value>
    <comment>Display name for EnumerationLiteral &apos;Dirty&apos; on DomainEnumeration &apos;OptimisticLocking&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.OptimisticLocking/Dirty.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.OptimisticLocking.Dirty</value>
    <comment>Description for EnumerationLiteral &apos;Dirty&apos; on DomainEnumeration &apos;OptimisticLocking&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.OptimisticLocking/All.DisplayName" xml:space="preserve">
    <value>All</value>
    <comment>Display name for EnumerationLiteral &apos;All&apos; on DomainEnumeration &apos;OptimisticLocking&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.OptimisticLocking/All.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.OptimisticLocking.All</value>
    <comment>Description for EnumerationLiteral &apos;All&apos; on DomainEnumeration &apos;OptimisticLocking&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NotFoundBehaviour/Default.DisplayName" xml:space="preserve">
    <value>Default</value>
    <comment>Display name for EnumerationLiteral &apos;Default&apos; on DomainEnumeration &apos;NotFoundBehaviour&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NotFoundBehaviour/Default.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.NotFoundBehaviour.Default</value>
    <comment>Description for EnumerationLiteral &apos;Default&apos; on DomainEnumeration &apos;NotFoundBehaviour&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NotFoundBehaviour/Exception.DisplayName" xml:space="preserve">
    <value>Exception</value>
    <comment>Display name for EnumerationLiteral &apos;Exception&apos; on DomainEnumeration &apos;NotFoundBehaviour&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NotFoundBehaviour/Exception.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.NotFoundBehaviour.Exception</value>
    <comment>Description for EnumerationLiteral &apos;Exception&apos; on DomainEnumeration &apos;NotFoundBehaviour&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NotFoundBehaviour/Ignore.DisplayName" xml:space="preserve">
    <value>Ignore</value>
    <comment>Display name for EnumerationLiteral &apos;Ignore&apos; on DomainEnumeration &apos;NotFoundBehaviour&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NotFoundBehaviour/Ignore.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.NotFoundBehaviour.Ignore</value>
    <comment>Description for EnumerationLiteral &apos;Ignore&apos; on DomainEnumeration &apos;NotFoundBehaviour&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.CodeGenerationTarget/ActiveRecord.DisplayName" xml:space="preserve">
    <value>ActiveRecord</value>
    <comment>Display name for EnumerationLiteral &apos;ActiveRecord&apos; on DomainEnumeration &apos;CodeGenerationTarget&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.CodeGenerationTarget/ActiveRecord.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.CodeGenerationTarget.ActiveRecord</value>
    <comment>Description for EnumerationLiteral &apos;ActiveRecord&apos; on DomainEnumeration &apos;CodeGenerationTarget&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.CodeGenerationTarget/NHibernate.DisplayName" xml:space="preserve">
    <value>NHibernate</value>
    <comment>Display name for EnumerationLiteral &apos;NHibernate&apos; on DomainEnumeration &apos;CodeGenerationTarget&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.CodeGenerationTarget/NHibernate.Description" xml:space="preserve">
    <value></value>
    <comment>Description for EnumerationLiteral &apos;NHibernate&apos; on DomainEnumeration &apos;CodeGenerationTarget&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyRelationCascadeEnum/None.DisplayName" xml:space="preserve">
    <value>None</value>
    <comment>Display name for EnumerationLiteral &apos;None&apos; on DomainEnumeration &apos;ManyRelationCascadeEnum&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyRelationCascadeEnum/None.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.ManyRelationCascadeEnum.None</value>
    <comment>Description for EnumerationLiteral &apos;None&apos; on DomainEnumeration &apos;ManyRelationCascadeEnum&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyRelationCascadeEnum/All.DisplayName" xml:space="preserve">
    <value>All</value>
    <comment>Display name for EnumerationLiteral &apos;All&apos; on DomainEnumeration &apos;ManyRelationCascadeEnum&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyRelationCascadeEnum/All.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.ManyRelationCascadeEnum.All</value>
    <comment>Description for EnumerationLiteral &apos;All&apos; on DomainEnumeration &apos;ManyRelationCascadeEnum&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyRelationCascadeEnum/SaveUpdate.DisplayName" xml:space="preserve">
    <value>SaveUpdate</value>
    <comment>Display name for EnumerationLiteral &apos;SaveUpdate&apos; on DomainEnumeration &apos;ManyRelationCascadeEnum&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyRelationCascadeEnum/SaveUpdate.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.ManyRelationCascadeEnum.SaveUpdate</value>
    <comment>Description for EnumerationLiteral &apos;SaveUpdate&apos; on DomainEnumeration &apos;ManyRelationCascadeEnum&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyRelationCascadeEnum/Delete.DisplayName" xml:space="preserve">
    <value>Delete</value>
    <comment>Display name for EnumerationLiteral &apos;Delete&apos; on DomainEnumeration &apos;ManyRelationCascadeEnum&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyRelationCascadeEnum/Delete.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.ManyRelationCascadeEnum.Delete</value>
    <comment>Description for EnumerationLiteral &apos;Delete&apos; on DomainEnumeration &apos;ManyRelationCascadeEnum&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyRelationCascadeEnum/AllDeleteOrphan.DisplayName" xml:space="preserve">
    <value>AllDeleteOrphan</value>
    <comment>Display name for EnumerationLiteral &apos;AllDeleteOrphan&apos; on DomainEnumeration &apos;ManyRelationCascadeEnum&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyRelationCascadeEnum/AllDeleteOrphan.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.ManyRelationCascadeEnum.AllDeleteOrphan</value>
    <comment>Description for EnumerationLiteral &apos;AllDeleteOrphan&apos; on DomainEnumeration &apos;ManyRelationCascadeEnum&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.InheritableBoolean/True.DisplayName" xml:space="preserve">
    <value>True</value>
    <comment>Display name for EnumerationLiteral &apos;True&apos; on DomainEnumeration &apos;InheritableBoolean&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.InheritableBoolean/True.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.InheritableBoolean.True</value>
    <comment>Description for EnumerationLiteral &apos;True&apos; on DomainEnumeration &apos;InheritableBoolean&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.InheritableBoolean/Inherit.DisplayName" xml:space="preserve">
    <value>Inherit</value>
    <comment>Display name for EnumerationLiteral &apos;Inherit&apos; on DomainEnumeration &apos;InheritableBoolean&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.InheritableBoolean/Inherit.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.InheritableBoolean.Inherit</value>
    <comment>Description for EnumerationLiteral &apos;Inherit&apos; on DomainEnumeration &apos;InheritableBoolean&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.InheritableBoolean/False.DisplayName" xml:space="preserve">
    <value>False</value>
    <comment>Display name for EnumerationLiteral &apos;False&apos; on DomainEnumeration &apos;InheritableBoolean&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.InheritableBoolean/False.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.InheritableBoolean.False</value>
    <comment>Description for EnumerationLiteral &apos;False&apos; on DomainEnumeration &apos;InheritableBoolean&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.FetchEnum/Select.DisplayName" xml:space="preserve">
    <value>Select</value>
    <comment>Display name for EnumerationLiteral &apos;Select&apos; on DomainEnumeration &apos;FetchEnum&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.FetchEnum/Select.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.FetchEnum.Select</value>
    <comment>Description for EnumerationLiteral &apos;Select&apos; on DomainEnumeration &apos;FetchEnum&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.FetchEnum/Join.DisplayName" xml:space="preserve">
    <value>Join</value>
    <comment>Display name for EnumerationLiteral &apos;Join&apos; on DomainEnumeration &apos;FetchEnum&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.FetchEnum/Join.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.FetchEnum.Join</value>
    <comment>Description for EnumerationLiteral &apos;Join&apos; on DomainEnumeration &apos;FetchEnum&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.FetchEnum/SubSelect.DisplayName" xml:space="preserve">
    <value>SubSelect</value>
    <comment>Display name for EnumerationLiteral &apos;SubSelect&apos; on DomainEnumeration &apos;FetchEnum&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.FetchEnum/SubSelect.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.FetchEnum.SubSelect</value>
    <comment>Description for EnumerationLiteral &apos;SubSelect&apos; on DomainEnumeration &apos;FetchEnum&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.FetchEnum/Unspecified.DisplayName" xml:space="preserve">
    <value>Unspecified</value>
    <comment>Display name for EnumerationLiteral &apos;Unspecified&apos; on DomainEnumeration &apos;FetchEnum&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.FetchEnum/Unspecified.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.FetchEnum.Unspecified</value>
    <comment>Description for EnumerationLiteral &apos;Unspecified&apos; on DomainEnumeration &apos;FetchEnum&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.MetaDataGeneration/False.DisplayName" xml:space="preserve">
    <value>False</value>
    <comment>Display name for EnumerationLiteral &apos;False&apos; on DomainEnumeration &apos;MetaDataGeneration&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.MetaDataGeneration/False.Description" xml:space="preserve">
    <value></value>
    <comment>Description for EnumerationLiteral &apos;False&apos; on DomainEnumeration &apos;MetaDataGeneration&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.MetaDataGeneration/InClass.DisplayName" xml:space="preserve">
    <value>InClass</value>
    <comment>Display name for EnumerationLiteral &apos;InClass&apos; on DomainEnumeration &apos;MetaDataGeneration&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.MetaDataGeneration/InClass.Description" xml:space="preserve">
    <value></value>
    <comment>Description for EnumerationLiteral &apos;InClass&apos; on DomainEnumeration &apos;MetaDataGeneration&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.MetaDataGeneration/InSubClass.DisplayName" xml:space="preserve">
    <value>InSubClass</value>
    <comment>Display name for EnumerationLiteral &apos;InSubClass&apos; on DomainEnumeration &apos;MetaDataGeneration&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.MetaDataGeneration/InSubClass.Description" xml:space="preserve">
    <value></value>
    <comment>Description for EnumerationLiteral &apos;InSubClass&apos; on DomainEnumeration &apos;MetaDataGeneration&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.InheritablePropertyAccess/Inherit.DisplayName" xml:space="preserve">
    <value>Inherit</value>
    <comment>Display name for EnumerationLiteral &apos;Inherit&apos; on DomainEnumeration &apos;InheritablePropertyAccess&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.InheritablePropertyAccess/Inherit.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.InheritablePropertyAccess.Inherit</value>
    <comment>Description for EnumerationLiteral &apos;Inherit&apos; on DomainEnumeration &apos;InheritablePropertyAccess&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.InheritablePropertyAccess/FieldLowercaseUnderscore.DisplayName" xml:space="preserve">
    <value>FieldLowercaseUnderscore</value>
    <comment>Display name for EnumerationLiteral &apos;FieldLowercaseUnderscore&apos; on DomainEnumeration &apos;InheritablePropertyAccess&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.InheritablePropertyAccess/FieldLowercaseUnderscore.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.InheritablePropertyAccess.FieldLowercaseUnderscore</value>
    <comment>Description for EnumerationLiteral &apos;FieldLowercaseUnderscore&apos; on DomainEnumeration &apos;InheritablePropertyAccess&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.InheritablePropertyAccess/FieldPascalcaseMUnderscore.DisplayName" xml:space="preserve">
    <value>FieldPascalcaseMUnderscore</value>
    <comment>Display name for EnumerationLiteral &apos;FieldPascalcaseMUnderscore&apos; on DomainEnumeration &apos;InheritablePropertyAccess&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.InheritablePropertyAccess/FieldPascalcaseMUnderscore.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.InheritablePropertyAccess.FieldPascalcaseMUnderscore</value>
    <comment>Description for EnumerationLiteral &apos;FieldPascalcaseMUnderscore&apos; on DomainEnumeration &apos;InheritablePropertyAccess&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.InheritablePropertyAccess/NosetterCamelcase.DisplayName" xml:space="preserve">
    <value>NosetterCamelcase</value>
    <comment>Display name for EnumerationLiteral &apos;NosetterCamelcase&apos; on DomainEnumeration &apos;InheritablePropertyAccess&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.InheritablePropertyAccess/NosetterCamelcase.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.InheritablePropertyAccess.NosetterCamelcase</value>
    <comment>Description for EnumerationLiteral &apos;NosetterCamelcase&apos; on DomainEnumeration &apos;InheritablePropertyAccess&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.InheritablePropertyAccess/NosetterCamelcaseUnderscore.DisplayName" xml:space="preserve">
    <value>NosetterCamelcaseUnderscore</value>
    <comment>Display name for EnumerationLiteral &apos;NosetterCamelcaseUnderscore&apos; on DomainEnumeration &apos;InheritablePropertyAccess&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.InheritablePropertyAccess/NosetterCamelcaseUnderscore.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.InheritablePropertyAccess.NosetterCamelcaseUnderscore</value>
    <comment>Description for EnumerationLiteral &apos;NosetterCamelcaseUnderscore&apos; on DomainEnumeration &apos;InheritablePropertyAccess&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.InheritablePropertyAccess/Property.DisplayName" xml:space="preserve">
    <value>Property</value>
    <comment>Display name for EnumerationLiteral &apos;Property&apos; on DomainEnumeration &apos;InheritablePropertyAccess&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.InheritablePropertyAccess/Property.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.InheritablePropertyAccess.Property</value>
    <comment>Description for EnumerationLiteral &apos;Property&apos; on DomainEnumeration &apos;InheritablePropertyAccess&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.InheritablePropertyAccess/NosetterPascalcaseMUnderscore.DisplayName" xml:space="preserve">
    <value>NosetterPascalcaseMUnderscore</value>
    <comment>Display name for EnumerationLiteral &apos;NosetterPascalcaseMUnderscore&apos; on DomainEnumeration &apos;InheritablePropertyAccess&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.InheritablePropertyAccess/NosetterPascalcaseMUnderscore.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.InheritablePropertyAccess.NosetterPascalcaseMUnderscore</value>
    <comment>Description for EnumerationLiteral &apos;NosetterPascalcaseMUnderscore&apos; on DomainEnumeration &apos;InheritablePropertyAccess&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.InheritablePropertyAccess/NosetterLowercaseUnderscore.DisplayName" xml:space="preserve">
    <value>NosetterLowercaseUnderscore</value>
    <comment>Display name for EnumerationLiteral &apos;NosetterLowercaseUnderscore&apos; on DomainEnumeration &apos;InheritablePropertyAccess&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.InheritablePropertyAccess/NosetterLowercaseUnderscore.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.InheritablePropertyAccess.NosetterLowercaseUnderscore</value>
    <comment>Description for EnumerationLiteral &apos;NosetterLowercaseUnderscore&apos; on DomainEnumeration &apos;InheritablePropertyAccess&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.InheritablePropertyAccess/NosetterLowercase.DisplayName" xml:space="preserve">
    <value>NosetterLowercase</value>
    <comment>Display name for EnumerationLiteral &apos;NosetterLowercase&apos; on DomainEnumeration &apos;InheritablePropertyAccess&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.InheritablePropertyAccess/NosetterLowercase.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.InheritablePropertyAccess.NosetterLowercase</value>
    <comment>Description for EnumerationLiteral &apos;NosetterLowercase&apos; on DomainEnumeration &apos;InheritablePropertyAccess&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.InheritablePropertyAccess/Field.DisplayName" xml:space="preserve">
    <value>Field</value>
    <comment>Display name for EnumerationLiteral &apos;Field&apos; on DomainEnumeration &apos;InheritablePropertyAccess&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.InheritablePropertyAccess/Field.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.InheritablePropertyAccess.Field</value>
    <comment>Description for EnumerationLiteral &apos;Field&apos; on DomainEnumeration &apos;InheritablePropertyAccess&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.InheritablePropertyAccess/FieldCamelcase.DisplayName" xml:space="preserve">
    <value>FieldCamelcase</value>
    <comment>Display name for EnumerationLiteral &apos;FieldCamelcase&apos; on DomainEnumeration &apos;InheritablePropertyAccess&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.InheritablePropertyAccess/FieldCamelcase.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.InheritablePropertyAccess.FieldCamelcase</value>
    <comment>Description for EnumerationLiteral &apos;FieldCamelcase&apos; on DomainEnumeration &apos;InheritablePropertyAccess&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.InheritablePropertyAccess/FieldCamelcaseUnderscore.DisplayName" xml:space="preserve">
    <value>FieldCamelcaseUnderscore</value>
    <comment>Display name for EnumerationLiteral &apos;FieldCamelcaseUnderscore&apos; on DomainEnumeration &apos;InheritablePropertyAccess&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.InheritablePropertyAccess/FieldCamelcaseUnderscore.Description" xml:space="preserve">
    <value>Description for Castle.ActiveWriter.InheritablePropertyAccess.FieldCamelcaseUnderscore</value>
    <comment>Description for EnumerationLiteral &apos;FieldCamelcaseUnderscore&apos; on DomainEnumeration &apos;InheritablePropertyAccess&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ClassShape.Description" xml:space="preserve">
    <value></value>
    <comment>Description for DomainClass &apos;ClassShape&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ClassShape.DisplayName" xml:space="preserve">
    <value>Class Shape</value>
    <comment>DisplayName for DomainClass &apos;ClassShape&apos;</comment>
  </data>
  <data name="ClassShapePropertiesTitle" xml:space="preserve">
    <value>Properties</value>
    <comment>Compartment title</comment>
  </data>
  <data name="ClassShapeNameDefaultText" xml:space="preserve">
    <value>Name</value>
    <comment>Text decorator default text</comment>
  </data>
  <data name="Castle.ActiveWriter.NestedClassShape.Description" xml:space="preserve">
    <value></value>
    <comment>Description for DomainClass &apos;NestedClassShape&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NestedClassShape.DisplayName" xml:space="preserve">
    <value>Nested Class Shape</value>
    <comment>DisplayName for DomainClass &apos;NestedClassShape&apos;</comment>
  </data>
  <data name="NestedClassShapePropertiesTitle" xml:space="preserve">
    <value>Properties</value>
    <comment>Compartment title</comment>
  </data>
  <data name="NestedClassShapeNameDefaultText" xml:space="preserve">
    <value>Name</value>
    <comment>Text decorator default text</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneConnector.Description" xml:space="preserve">
    <value></value>
    <comment>Description for DomainClass &apos;ManyToOneConnector&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToOneConnector.DisplayName" xml:space="preserve">
    <value>Many To One Connector</value>
    <comment>DisplayName for DomainClass &apos;ManyToOneConnector&apos;</comment>
  </data>
  <data name="ManyToOneConnectorOneDefaultText" xml:space="preserve">
    <value>1</value>
    <comment>Text decorator default text</comment>
  </data>
  <data name="ManyToOneConnectorManyDefaultText" xml:space="preserve">
    <value>n</value>
    <comment>Text decorator default text</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyConnector.Description" xml:space="preserve">
    <value></value>
    <comment>Description for DomainClass &apos;ManyToManyConnector&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ManyToManyConnector.DisplayName" xml:space="preserve">
    <value>Many To Many Connector</value>
    <comment>DisplayName for DomainClass &apos;ManyToManyConnector&apos;</comment>
  </data>
  <data name="ManyToManyConnectorManySourceDefaultText" xml:space="preserve">
    <value>n</value>
    <comment>Text decorator default text</comment>
  </data>
  <data name="ManyToManyConnectorManyTargetDefaultText" xml:space="preserve">
    <value>m</value>
    <comment>Text decorator default text</comment>
  </data>
  <data name="Castle.ActiveWriter.OneToOneConnector.Description" xml:space="preserve">
    <value>Associates a foreign table where the current class and the target class share their primary key.</value>
    <comment>Description for DomainClass &apos;OneToOneConnector&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.OneToOneConnector.DisplayName" xml:space="preserve">
    <value>One To One Connector</value>
    <comment>DisplayName for DomainClass &apos;OneToOneConnector&apos;</comment>
  </data>
  <data name="OneToOneConnectorOneSourceDefaultText" xml:space="preserve">
    <value>1</value>
    <comment>Text decorator default text</comment>
  </data>
  <data name="OneToOneConnectorOneTargetDefaultText" xml:space="preserve">
    <value>1</value>
    <comment>Text decorator default text</comment>
  </data>
  <data name="Castle.ActiveWriter.NestedConnector.Description" xml:space="preserve">
    <value>Associates a domain class with a nested class, representing an extracted subset of repeating properties for multiple classes.</value>
    <comment>Description for DomainClass &apos;NestedConnector&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.NestedConnector.DisplayName" xml:space="preserve">
    <value>Nested Connector</value>
    <comment>DisplayName for DomainClass &apos;NestedConnector&apos;</comment>
  </data>
  <data name="NestedConnectorNestedDefaultText" xml:space="preserve">
    <value>Nested</value>
    <comment>Text decorator default text</comment>
  </data>
  <data name="Castle.ActiveWriter.InheritanceConnector.Description" xml:space="preserve">
    <value>Indicates that a class inherits from another class.</value>
    <comment>Description for DomainClass &apos;InheritanceConnector&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.InheritanceConnector.DisplayName" xml:space="preserve">
    <value>Inheritance Connector</value>
    <comment>DisplayName for DomainClass &apos;InheritanceConnector&apos;</comment>
  </data>
  <data name="FormatList" xml:space="preserve">
    <value>ActiveWriter (*.actiw)|*.actiw</value>
    <comment>A list of file format specifiers for the Save dialog box</comment>
  </data>
  <data name="ModelExplorerTitle" xml:space="preserve">
    <value>ActiveWriter</value>
    <comment>Model Explorer Toolwindow title</comment>
  </data>
  <data name="Castle.ActiveWriter.ActiveRecordMapping.Description" xml:space="preserve">
    <value></value>
    <comment>Description for DomainClass &apos;ActiveRecordMapping&apos;</comment>
  </data>
  <data name="Castle.ActiveWriter.ActiveRecordMapping.DisplayName" xml:space="preserve">
    <value>Active Record Mapping</value>
    <comment>DisplayName for DomainClass &apos;ActiveRecordMapping&apos;</comment>
  </data>
  <data name="ActiveWriterToolboxTab" xml:space="preserve">
    <value>ActiveWriter</value>
    <comment>Toolbox item tab name</comment>
  </data>
  <data name="ClassToolboxItem" xml:space="preserve">
    <value>Class</value>
    <comment>Toolbox item name</comment>
  </data>
  <data name="ClassToolboxTooltip" xml:space="preserve">
    <value>Create a Domain Class</value>
    <comment>Toolbox tooltip text</comment>
  </data>
  <data name="ManyToOneRelationshipToolboxItem" xml:space="preserve">
    <value>Many To One Relationship</value>
    <comment>Toolbox item name</comment>
  </data>
  <data name="ManyToOneRelationshipToolboxTooltip" xml:space="preserve">
    <value>Drag between classes to create a many to one relationship</value>
    <comment>Toolbox tooltip text</comment>
  </data>
  <data name="ManyToManyRelationshipToolboxItem" xml:space="preserve">
    <value>Many To Many Relationship</value>
    <comment>Toolbox item name</comment>
  </data>
  <data name="ManyToManyRelationshipToolboxTooltip" xml:space="preserve">
    <value>Drag between classes to create a many to many relationship</value>
    <comment>Toolbox tooltip text</comment>
  </data>
  <data name="OneToOneRelationshipToolboxItem" xml:space="preserve">
    <value>One To One Relationship</value>
    <comment>Toolbox item name</comment>
  </data>
  <data name="OneToOneRelationshipToolboxTooltip" xml:space="preserve">
    <value>Drag between classes to create a one to one relationship</value>
    <comment>Toolbox tooltip text</comment>
  </data>
  <data name="NestedClassToolboxItem" xml:space="preserve">
    <value>Nested Class</value>
    <comment>Toolbox item name</comment>
  </data>
  <data name="NestedClassToolboxTooltip" xml:space="preserve">
    <value>Create a Nested Class</value>
    <comment>Toolbox tooltip text</comment>
  </data>
  <data name="NestedRelationshipToolboxItem" xml:space="preserve">
    <value>Nested Relationship</value>
    <comment>Toolbox item name</comment>
  </data>
  <data name="NestedRelationshipToolboxTooltip" xml:space="preserve">
    <value>Drag between classes to create a nested relationship</value>
    <comment>Toolbox tooltip text</comment>
  </data>
  <data name="InheritanceRelationshipToolboxItem" xml:space="preserve">
    <value>Inheritance Relationship</value>
    <comment>Toolbox item name</comment>
  </data>
  <data name="InheritanceRelationshipToolboxTooltip" xml:space="preserve">
    <value>Drag from a subclass to a parent class to create an inheritance relationship.</value>
    <comment>Toolbox tooltip text</comment>
  </data>
  <data name="UnresolvedToolboxItem" xml:space="preserve">
    <value>ToolboxItem {0} was not found</value>
    <comment>Invalid toolId</comment>
  </data>
  <data name="UnsupportedToolboxFormat" xml:space="preserve">
    <value>Unsupported toolbox format: {0}</value>
    <comment>Unsupported format Id</comment>
  </data>
  <data name="UnrecognizedElementType" xml:space="preserve">
    <value>ElementType {0} is not recognized as a type of domain class which belongs to this domain model.</value>
    <comment>Incorrect ElementType passed in to Model.CreateElement method</comment>
  </data>
  <data name="UnrecognizedElementLinkType" xml:space="preserve">
    <value>ElementLinkType {0} is not recognized as a type of domain relationship which belongs to this domain model.</value>
    <comment>Incorrect ElementLinkType passed in to Model.CreateElementLink method</comment>
  </data>
  <data name="AmbiguousSchema" xml:space="preserve">
    <value>More than one schema found for target namespace &apos;{0}&apos;, use the first one at &apos;{1}&apos;.</value>
    <comment>Serialization Warning: AmbiguousSchema</comment>
  </data>
  <data name="ExpectingFullFormRelationship" xml:space="preserve">
    <value>Element &apos;{0}&apos; is treated as the target role-player of a relationship &apos;{1}&apos; instance, which should be serialized in full-form.</value>
    <comment>Serialization Warning: ExpectingFullFormRelationship</comment>
  </data>
  <data name="ExpectingShortFormRelationship" xml:space="preserve">
    <value>Instances of relationship &apos;{0}&apos; should be serialized in short-form.</value>
    <comment>Serialization Warning: ExpectingShortFormRelationship</comment>
  </data>
  <data name="IgnoredPropertyValue" xml:space="preserve">
    <value>Invalid property value &apos;{0}&apos; for property &apos;{1}&apos; with type &apos;{2}&apos;, ignored.</value>
    <comment>Serialization Warning: IgnoredPropertyValue</comment>
  </data>
  <data name="MissingId" xml:space="preserve">
    <value>Missing &apos;Id&apos; attribute, a new Guid &apos;{0}&apos; is auto-generated.</value>
    <comment>Serialization Warning: MissingId</comment>
  </data>
  <data name="MonikerResolvedToDuplicateLink" xml:space="preserve">
    <value>Resolving moniker &apos;{0}&apos; causes a duplicate link to be created, so the link and the moniker are ignored.</value>
    <comment>Serialization Warning: MonikerResolvedToDuplicateLink</comment>
  </data>
  <data name="NoSchema" xml:space="preserve">
    <value>Cannot find a schema that defines target namespace &apos;{0}&apos;, schema validation skipped.</value>
    <comment>Serialization Warning: NoSchema</comment>
  </data>
  <data name="UnexpectedXmlElement" xml:space="preserve">
    <value>Unexpected XML element &apos;{0}&apos;, ignored.</value>
    <comment>Serialization Warning: UnexpectedXmlElement</comment>
  </data>
  <data name="AmbiguousMoniker" xml:space="preserve">
    <value>Ambiguous moniker &apos;{0}&apos; encountered. It is used for both &apos;{1}&apos; and &apos;{2}&apos;.</value>
    <comment>Serialization Error: AmbiguousMoniker</comment>
  </data>
  <data name="CannotMonikerizeElement" xml:space="preserve">
    <value>Instances of DomainClass &apos;{0}&apos; cannot be serialized as a moniker.
A DomainClass can be serialized as a moniker only if 
1) it has a defined/inherited DomainProperty marked as IsMonikerKey=true, or 
2) it is marked/inherited with SerializeId=true.</value>
    <comment>Serialization Error: CannotMonikerizeElement</comment>
  </data>
  <data name="CannotOpenDocument" xml:space="preserve">
    <value>Error encountered, check Error List window for details.</value>
    <comment>Serialization Error: CannotOpenDocument</comment>
  </data>
  <data name="CannotSaveDocument" xml:space="preserve">
    <value>Error encountered, check Error List window for details.</value>
    <comment>Serialization Error: CannotSaveDocument</comment>
  </data>
  <data name="DanglingRelationship" xml:space="preserve">
    <value>Relationship &apos;{0}&apos; instance is missing target role-player.</value>
    <comment>Serialization Error: DanglingRelationship</comment>
  </data>
  <data name="InvalidPropertyValue" xml:space="preserve">
    <value>Invalid property value &apos;{0}&apos; for property &apos;{1}&apos; with type &apos;{2}&apos;.</value>
    <comment>Serialization Error: InvalidPropertyValue</comment>
  </data>
  <data name="MissingMoniker" xml:space="preserve">
    <value>Missing moniker. A moniker is expected in attribute &apos;{0}&apos;.</value>
    <comment>Serialization Error: MissingMoniker</comment>
  </data>
  <data name="MissingTransaction" xml:space="preserve">
    <value>This must be called within the context of an active transaction.</value>
    <comment>Serialization Error: MissingTransaction</comment>
  </data>
  <data name="UnresolvedMoniker" xml:space="preserve">
    <value>Cannot resolve moniker &apos;{0}&apos;.</value>
    <comment>Serialization Error: UnresolvedMoniker</comment>
  </data>
  <data name="VersionMismatch" xml:space="preserve">
    <value>Unsupported version &apos;{0}&apos;, can only support &apos;{1}&apos;.</value>
    <comment>Serialization Error: VersionMismatch</comment>
  </data>
  <data name="CannotCloseExistingDiagramDocument" xml:space="preserve">
    <value>Diagram file &apos;{0}&apos; cannot be closed.</value>
    <comment>User cancel closing diagram file. Hence, the DSL model file cannot be opened</comment>
  </data>
  <data name="BindingErrorOccurred" xml:space="preserve">
    <value>Extensions for this designer may not be found as a MEF binding error has occurred. The error that occurred was:
{0}</value>
    <comment>MEF binding error occurred - exception message being logged in the error window so the user is aware.</comment>
  </data>
  <data name="InvalidSaveRootElementType" xml:space="preserve">
    <value>&apos;{0}&apos; is not a valid root element type.</value>
    <comment>Exception message used if an invalid root element type is passed to IDomainModelSerializer.SaveModel / SaveModelAndDiagram</comment>
  </data>
  <data name="InvalidSaveDiagramType" xml:space="preserve">
    <value>&apos;{0}&apos; is not a valid diagram type.</value>
    <comment>Exception message used if an invalid diagram type is passed to IDomainModelSerializer.SaveModelAndDiagram</comment>
  </data>
  <data name="MinimumMultiplicityMissingLink" xml:space="preserve">
    <value>{0} {1} has no {2}.</value>
    <comment>Multiplicity underflow validation.</comment>
  </data>
  <data name="SaveOperationCancelled" xml:space="preserve">
    <value>Save operation cancelled.</value>
    <comment>Message when save is cancelled on validation errors</comment>
  </data>
  <data name="SaveValidationFailed" xml:space="preserve">
    <value>There were validation errors, continue save?</value>
    <comment>Message when validation errors are found on save</comment>
  </data>
  <data name="UnloadableSaveValidationFailed" xml:space="preserve">
    <value>There were validation errors. Continuing to save may cause the file to become unloadable, do you want to continue?</value>
    <comment>Message when validation errors are found on save that will cause file to become unloadable</comment>
  </data>
  <assembly alias="System.Windows.Forms" name="System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="ClassShapeKeyDefaultImage" type="System.Resources.ResXFileRef, System.Windows.Forms" xml:space="preserve">
    <value>..\Resources\key.png;System.Byte[], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
    <comment>Icon decorator default image</comment>
  </data>
  <data name="ClassShapeValidationDefaultImage" type="System.Resources.ResXFileRef, System.Windows.Forms" xml:space="preserve">
    <value>..\Resources\validation.png;System.Byte[], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
    <comment>Icon decorator default image</comment>
  </data>
  <data name="ClassToolboxBitmap" type="System.Resources.ResXFileRef, System.Windows.Forms" xml:space="preserve">
    <value>..\Resources\ClassTool.bmp;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
    <comment>Toolbox item image</comment>
  </data>
  <data name="ManyToOneRelationshipToolboxBitmap" type="System.Resources.ResXFileRef, System.Windows.Forms" xml:space="preserve">
    <value>..\Resources\Connector12n.bmp;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
    <comment>Toolbox item image</comment>
  </data>
  <data name="ManyToManyRelationshipToolboxBitmap" type="System.Resources.ResXFileRef, System.Windows.Forms" xml:space="preserve">
    <value>..\Resources\Connectorm2n.bmp;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
    <comment>Toolbox item image</comment>
  </data>
  <data name="OneToOneRelationshipToolboxBitmap" type="System.Resources.ResXFileRef, System.Windows.Forms" xml:space="preserve">
    <value>..\Resources\Connector121.bmp;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
    <comment>Toolbox item image</comment>
  </data>
  <data name="NestedClassToolboxBitmap" type="System.Resources.ResXFileRef, System.Windows.Forms" xml:space="preserve">
    <value>..\Resources\ClassTool.bmp;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
    <comment>Toolbox item image</comment>
  </data>
  <data name="NestedRelationshipToolboxBitmap" type="System.Resources.ResXFileRef, System.Windows.Forms" xml:space="preserve">
    <value>..\Resources\ConnectorNested.bmp;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
    <comment>Toolbox item image</comment>
  </data>
  <data name="InheritanceRelationshipToolboxBitmap" type="System.Resources.ResXFileRef, System.Windows.Forms" xml:space="preserve">
    <value>..\Resources\ConnectorInheritance.bmp;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
    <comment>Toolbox item image</comment>
  </data>
</root>


